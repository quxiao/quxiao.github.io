<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Xavier's Blog]]></title>
  <link href="http://quxiao.github.io/atom.xml" rel="self"/>
  <link href="http://quxiao.github.io/"/>
  <updated>2014-05-02T17:40:56+08:00</updated>
  <id>http://quxiao.github.io/</id>
  <author>
    <name><![CDATA[Xavier]]></name>
    <email><![CDATA[quxiao86@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[获取最近几分钟的日志]]></title>
    <link href="http://quxiao.github.io/blog/2014/05/02/get-last-some-minutes-log/"/>
    <updated>2014-05-02T16:39:35+08:00</updated>
    <id>http://quxiao.github.io/blog/2014/05/02/get-last-some-minutes-log</id>
    <content type="html"><![CDATA[<p>最近在整理对于各个模块的监控，需要有一定的实时性。比如，需要获取最近几分钟内的日志，然后看某些请求的数量以及响应时间是否符合要求。但是，线上服务的日志，通常都是按照小时粒度进行切分的，你不可能对一个文件进行直接的过滤操作。在此之前需要解决一个问题：<strong>在一份文件中，获取最近一段时间的日志</strong>。</p>

<p>当然，还有一个最最基础的问题：你的日志内容里面是表示时间的字段的。（不打时间和请求ID的日志简直就是耍流氓！）</p>

<p>我一开始的想法是：估算平均请求压力下，每5分钟的日志会有多少条，然后直接将<code>cat</code>替换为<code>tail -n XXX</code>就可以了。虽然修改起来很方便，但是是有明显缺陷的：</p>

<ol>
<li>随着流量变化，<code>tail</code>出来的日志的时间粒度是不一样的。如果用来监控实时请求响应时间还算能接受，用来监控请求量就不行了；</li>
<li>如果以后模块升级，增加或者减少了请求日志，<code>tail</code>出来的数字需要不断调整。</li>
</ol>


<p>看来还是要精确的获取某个时间段的日志才行。其实思路还是比较清晰的：</p>

<ol>
<li>计算出<code>开始时间</code>和<code>结束时间</code>两个字段</li>
<li>提取日志行中的<code>日志时间</code></li>
<li>比较三个值，如果日志行的时间符合要求，则将其打印，作为过滤程序的输入</li>
<li>执行数日志数量或者统计请求响应时间的命令</li>
</ol>


<p>对于步骤1，使用<code>date</code>命令就可以获取，这个简单。</p>

<p>对于步骤2，一般日志中的时间都会比较在日志前面几个字段，比较好提取，也不难。</p>

<p>步骤4嘛，就看需求是什么了，如果是获取请求数目，直接用<code>grep</code>和<code>wc -l</code>就OK了。如果涉及到提取日志字段，简单的也可以用<code>cut</code>搞定，复杂就得用<code>grep</code>或者<code>awk</code>了。</p>

<p>最关键是步骤3如何实现，我想到的是在<code>awk</code>中进行逻辑判断，获取日志中的时间字段不难，但是如果时间字段是通过多个字段拼接而来的，比如<code>2014-05-02</code>和<code>17:25:00</code>，怎么把他们放到一个变量里面呢？要是有像<code>sprintf</code>这样的函数就好了，没想到，还真有！类似于下面这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    cat xxx.log | awk <span class="s1">&#39;{t=sprintf(&quot;%s %s&quot;, $2, $3);}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有一个问题，就是如何将BASH中的<code>开始时间</code>和<code>结束时间</code>变量传入<code>awk</code>呢？也有办法的！<code>awk</code>里面有<code>-v</code>选项，支持将外部变量传入其中。那么程序就类似于这样了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nv">start_time</span><span class="o">=</span><span class="sb">`</span>date -d<span class="s2">&quot;$last_minutes minutes ago&quot;</span> +<span class="s2">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="sb">`</span>
</span><span class='line'>    <span class="nv">end_time</span><span class="o">=</span><span class="sb">`</span>date +<span class="s2">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="sb">`</span>
</span><span class='line'>    cat xxx.log | awk -v <span class="nv">st</span><span class="o">=</span><span class="s2">&quot;$start_time&quot;</span> -v <span class="nv">et</span><span class="o">=</span><span class="s2">&quot;$end_time&quot;</span> <span class="s1">&#39;{t=sprintf(&quot;%s %s&quot;, $2, $3); if(t&gt;=st &amp;&amp; t&lt;=et){print $0}}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，还有一个小问题，因为会定期切分日志，所以需要考虑临界时间点的情况，把当前时间段和上个时间段的日志同时作为输入即可。</p>

<p>这样，精确获取最近一段时间日志的需求就得到解决了。</p>

<p>&mdash;EOF&mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[仿函数——Functor]]></title>
    <link href="http://quxiao.github.io/blog/2014/04/05/functor/"/>
    <updated>2014-04-05T22:59:13+08:00</updated>
    <id>http://quxiao.github.io/blog/2014/04/05/functor</id>
    <content type="html"><![CDATA[<h2>简单的需求</h2>

<p>比如，有一个简单需求：找到一个<code>vector&lt;string&gt;</code>中，长度小于3的字符串的数目。解决方法可能会是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="kt">int</span> <span class="n">count</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">str_vec</span><span class="p">,</span> <span class="k">const</span> <span class="n">size_t</span> <span class="n">threshold</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;::</span><span class="n">const_iterator</span> <span class="n">it</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">it</span> <span class="o">=</span> <span class="n">str_vec</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">str_vec</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span> <span class="n">it</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">length</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">threshold</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="o">++</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实，数据STL的同学应该知道有个<code>count_if</code>函数。<code>count_if</code>的功能就是对于某种容器，对符合条件的元素进行计数。<code>count_if</code>包含三个参数，容器的开始地址、容器的结束地址、以及参数为元素类型的函数。</p>

<p>使用<code>count_if</code>的代码可以这样写：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="kt">bool</span> <span class="n">test</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">str_vec</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">count_if</span><span class="p">(</span><span class="n">str_vec</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">str_vec</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">test</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，这样有个问题：没有扩展性。比如，判断的字符串由长度3变成5呢？将<code>test</code>函数上面再增加一个长度参数可以吗？不行，<code>count_if</code>的实现就决定了<code>test</code>必须是单一参数的。既想满足<code>count_if</code>的语法要求，又需要让判断的函数具有可扩展性，这时候就需要<strong><code>functor</code></strong>了。</p>

<h2><code>functor</code>登场</h2>

<p><code>functor</code>的含义是：调用它就像调用一个普通的函数一样，不过它的本质是一个类的实例的成员函数（<code>operator()</code>这个函数），所以<code>functor</code>也叫<code>function object</code>。
因此以下代码的最后两个语句是等价的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="k">class</span> <span class="nc">SomeFunctor</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">void</span> <span class="k">operator</span><span class="p">()</span> <span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SomeFunctor</span> <span class="n">functor</span><span class="p">;</span>
</span><span class='line'>    <span class="n">functor</span><span class="p">(</span><span class="s">&quot;world&quot;</span><span class="p">);</span>               <span class="c1">//Hello world</span>
</span><span class='line'>    <span class="n">functor</span><span class="p">.</span><span class="k">operator</span><span class="p">()(</span><span class="s">&quot;world&quot;</span><span class="p">);</span>    <span class="c1">//Hello world</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实，它并不算是STL中的一部分，不过需要STL中的函数都把<code>functor</code>所谓参数之一，<code>functor</code>起到了定制化的作用。<code>functor</code>与其它普通的函数相比，有一个明显的特点：<strong>可以使用成员变量</strong>。这样，就提供了扩展性。</p>

<p>继续上面例子，写成<code>functor</code>的形式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="k">class</span> <span class="nc">LessThan</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">LessThan</span><span class="p">(</span><span class="n">size_t</span> <span class="n">threshold</span><span class="p">)</span><span class="o">:</span> <span class="n">_threshold</span><span class="p">(</span><span class="n">threshold</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>        <span class="kt">bool</span> <span class="k">operator</span><span class="p">()</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">_threshold</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="k">const</span> <span class="n">size_t</span> <span class="n">_threshold</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">str_vec</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">LessThan</span> <span class="n">less_than_three</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">count_if</span><span class="p">(</span><span class="n">str_vec</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">str_vec</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">less_than_three</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//LessThan less_than_five(5);</span>
</span><span class='line'>        <span class="c1">//std::count_if(str_vec.begin(), str_vec.end(), less_than_five);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count_v2</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">str_vec</span><span class="p">,</span> <span class="k">const</span> <span class="n">size_t</span> <span class="n">threshold</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">count_if</span><span class="p">(</span><span class="n">str_vec</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">str_vec</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">LessThan</span><span class="p">(</span><span class="n">threshold</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>C++11的新玩法</h2>

<p>有人可能会说，我已经有了自己实现的判断函数了，但是直接用又不行，有啥解决办法吗？
其实是有的！（我也是最近才发现的）</p>

<p>C++11的标准中，提供了一套函数，能将一个普通的、不符合使用方要求的函数，转变成一个符合参数列表要求的<code>functor</code>，这实在是太酷了！</p>

<p>比如用户自己实现的<code>int test(const std::string&amp; str_vec, const size_t threshold)</code>函数，如果能将第二个参数进行<strong>绑定</strong>，不就符合<code>count_if</code>的要求了吗？</p>

<p>新标准的C++就提供了这样一个函数——<code>bind</code>。</p>

<p>通过<code>std::bind</code>以及<code>std::placeholders</code>，就可以实现转化，样例代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="kt">bool</span> <span class="n">less_than_func</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">,</span> <span class="k">const</span> <span class="n">size_t</span> <span class="n">threshold</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">threshold</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//提供 _1 占位符</span>
</span><span class='line'>    <span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//绑定less_than_func第二个参数为5, 转化为functor</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">less_than_functor</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">less_than_func</span><span class="p">,</span> <span class="n">_1</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">count_if</span><span class="p">(</span><span class="n">str_vec</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">str_vec</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">less_than_functor</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><a href="http://www.stanford.edu/class/cs106l/course-reader/Ch13_Functors.pdf">http://www.stanford.edu/class/cs106l/course-reader/Ch13_Functors.pdf</a></li>
<li><a href="http://www.cplusplus.com/reference/functional/bind/">http://www.cplusplus.com/reference/functional/bind/</a></li>
</ul>


<p>&mdash;EOF&mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[公司设立分部弊端之我见]]></title>
    <link href="http://quxiao.github.io/blog/2014/03/24/branch-in-my-eye/"/>
    <updated>2014-03-24T20:16:08+08:00</updated>
    <id>http://quxiao.github.io/blog/2014/03/24/branch-in-my-eye</id>
    <content type="html"><![CDATA[<p>入职已经快两年了，因为当时考虑到离家近，就没有去北京的总部，而是选了上海的分部研发中心。但是心想，“多好啊，研发中心里面大多数都是搞技术的，我们技术人员之间沟通肯定很顺畅，也能学到不少东西”。现实情况和我想得其实差不多，不过还多了些我当初没有想到的地方。</p>

<h2>老大们都在总部</h2>

<p>虽然团队的项目经理或者技术经历基本上都在上海，但是，总监级别的老大却几乎都在北京的总部，有些上层的消息，上海分部就比较迟才能接收到。正式由于这种消息的滞后性，以及来上层管理人员的沟通不畅，<strong> 分部在资源分配上面就略显吃亏了。</strong></p>

<h2>人员结构单一</h2>

<p>我入职前总以为，作为分部，按道理是按项目来分的。比如一部分项目划给总部的团队、另一部分划给分部的团队。但事实是：<strong>项目的开发人员放在分部，而其它人员全在总部。</strong> 我就见过一两个团队的全部人员都是在分部的，其余都是我前面说的那种情况。</p>

<p>这种的人员的划分方式，就直接导致一个问题：同一个团队的总部人员和分部人员的不团结。我一开始待的团队，是这样划分的：老大、产品经理、UE、FE都在总部，后端RD在分部。我们对于需求的沟通，基本上都是电话会议的形式。虽然在一个团队，但是毕竟在两个地方工作，彼此都没有见过，互相不熟悉，大家只是共事，而不算是朋友。每当有一些争论的时候，大家心里都是下意识的怀疑是不是对方想少干一些活儿，把东西都推给我来做。因此很容易有矛盾。本来如果面对面也就10分钟能沟通好的事情，相隔两地就是无法打成一致。</p>

<h2>核心技术在总部</h2>

<p>一般来说，掌握核心技术的团队都会在总部，分部一般都是由于业务需要而逐渐扩展出来的。到了大公司，渐渐明白，<strong> 大公司的项目组之间的差异实在是太大了！就好像不同公司之间的差距一样 </strong>。在一个比较核心的团队里面，无论是技术、资源、还是经验，都比其它团队要成熟、规范的多，对于自身的成长，是极其有益的。万一你进了一个不是那么受重视的团队的话，各种没技术含量的重复劳动、或者是为了争取一些资源的各种扯皮，还是会很多的。</p>

<p>我之前和同事聊到这个话题，总会拿星际争霸来打比方：分基地嘛，主要的任务就是采矿，给主基地提供资源，能搞点兵营、炮台守住就可以了，主要的高端兵种都是总基地先造出来了，就算分基地有高级兵种，也会出的比较慢。</p>

<p>&mdash;EOF&mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日志规范实践]]></title>
    <link href="http://quxiao.github.io/blog/2014/03/18/log-practice/"/>
    <updated>2014-03-18T21:54:26+08:00</updated>
    <id>http://quxiao.github.io/blog/2014/03/18/log-practice</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>这两天在整理现有模块的日志格式规范，以便于自己团队和其它团队更好的分析目前的产品。看了下，遗留的问题还真不少，问题主要集中在以下几点：</p>

<h4>日志级别不正确</h4>

<p>不是请求粒度的日志打成了<code>NOTICE</code>，用于排查的日志打成了<code>WARNING</code>、甚至打成了<code>FATAL</code>。这对于线上模块监控很不利，一方面很难从众多的<code>WARNING</code>和<code>FATAL</code>日志中找到有价值的信息，另一方面这些日志多了，难免让人产生“狼来了”的麻痹心理。</p>

<h4>字段命名不统一</h4>

<p>同样一个参数，比如说是请求ID，在不同的请求日志中，有<code>logid</code>、<code>log_id</code>、<code>logId</code>各种不同风格的写法，有的参数是用<code>[]</code>括起来的，有的则没有。这些问题会给日志解析程序带来很大的负担。</p>

<h4>字段含义不一致</h4>

<p>不同请求日志中的参数A，在一种请求中表示一种含义（比如触发出的商品数），在其它请求中则表示另一种含义（比如一页展现的商品数）。</p>

<h4>日志被公共Lib污染</h4>

<p>自己的模块依赖了其它公共lib，但是公共lib中的日志级别比较随意，结果污染了自身模块日志。</p>

<h4>日志信息不足</h4>

<p>许多<code>NOTICE</code>日志只打印出了给上游的返回数据，请求数据却不全。一些<code>WARNING</code>日志只能看出只在代码的哪一行出了问题，请求参数是什么、甚至请求ID，都没有。线上出现了问题，很难根据这条日志找到线索。</p>

<!--More-->


<h2>规范</h2>

<p>因此，我们需要对现在的日志格式进行<strong>专项整治</strong>，总结出一些合理的、改动尽量小的日志规范。这两天和同事讨论了下，整理出了一些：</p>

<h4>统一字段命名</h4>

<p>对于不同请求中的同一含义的字段，只能有一个名字。</p>

<h4>统一字段风格</h4>

<p>字段一律使用<code>xxx_yyy</code>的下划线命名风格。</p>

<h4>统一日志层级风格</h4>

<p>日志中的信息均通过<code>k=v</code>形式表达，<code>kv</code>之间以<code>,</code>分割，表示第一层级；如果<code>v</code>还有第二层级，则用<code>_</code>分割；第三层级用<code>|</code>分割。ex: <code>k1=v111|v112_v21_v22,k2=v2</code></p>

<h4>统一字段顺序</h4>

<p>统一使用<code>请求ID/服务名/请求参数/响应数据/响应时间</code>作为日志字段顺序。（当然，一般公司都有自己的日志工具，会将日志级别、时间、线程ID、函数、行号这些打印在最前面。）</p>

<h4>日志必须有请求ID</h4>

<p>请求粒度的日志中，必须包含请求ID；工具类的lib中，对于功能较小的函数，无需打日志；功能点较多的函数，需将请求ID通过参数传递进去。</p>

<h4>只有请求粒度的日志，才能是NOTICE级别</h4>

<p>其它公共lib中的代码，需要打到单独的日志文件中，不和本身模块的日志混淆。</p>

<hr />

<p>日志实在是太重要了，一方面反映了用户的行为，另一方面也反映了模块的指标（召回率、响应时间等），怎么规范它估计都不为过。我们整理的这些规范也智能算是个迷你版本。</p>

<p>其实，我们制定的这些规范（以及其它规范），并没有谁一开始就能全部想到，正如TA一开始也想不到会有再上面的问题一样。每个人都很自信的认为其他人会和TA是一样的代码或者日志风格，如果所有关于打印日志的代码，都是由一个人来写的话，风格想必都是统一的，因为TA知道过去的代码是什么样的，为什么需要改成现在这样，哪些字段是后来因为什么原因而加上的。如果TA另外也负责对日志进行解析和统计的话，那么日志风格就会完全统一了。 :P</p>

<p>规范的制定，从某种意义上讲，也是一种被逼的结果，因为总会有人最终无法忍受由于种种问题而导致的心智负担，然后说道，“受不了了，我们还是搞个规范吧！”</p>

<p>&mdash; EOF &mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小试Travis-Ci]]></title>
    <link href="http://quxiao.github.io/blog/2014/02/24/a-try-to-play-with-travis-ci/"/>
    <updated>2014-02-24T07:36:20+08:00</updated>
    <id>http://quxiao.github.io/blog/2014/02/24/a-try-to-play-with-travis-ci</id>
    <content type="html"><![CDATA[<p>前段时间，好友小新给我看了一个工具（或者说是一种服务）——<strong>travis-ci</strong>，它提供了对于Github的项目上的持续集成服务（私有项目是要收费的）。正好最近把一个大学时写的小程序从Google Code迁移到Github上，就拿他来做个实验吧！</p>

<h2>.travis.yml</h2>

<p>查看travis-ci的官方文档，其实十分简单。如果需要在项目中使用travis-ci提供的服务，只需要在Repository中添加<code>.travis.yml</code>配置文件。进行持续集成嘛，配置文件里面无非就是这么几项吧：</p>

<ul>
<li>使用的编程语言</li>
<li>编译器及其版本</li>
<li>编译命令</li>
<li>跑测试用例的命令</li>
<li>etc.</li>
</ul>


<!--more-->


<p>是的，不过travis-ci提供更细粒度的操作。当你每次push时，它进行如下操作：</p>

<ol>
<li><code>clone</code>你的repository并<code>cd</code>进去</li>
<li>执行<code>before_install</code>操作</li>
<li>执行<code>install</code>操作</li>
<li>执行<code>before_script</code>操作</li>
<li>执行<code>script</code>操作</li>
<li>根据是否成功，执行<code>after_success</code>和<code>after_failure</code>操作</li>
<li>执行<code>after_script</code>操作</li>
</ol>


<p>其中除了步骤1，其它操作的命令都需要在<code>.travis.yml</code>中进行配置，具体可以看<a href="http://docs.travis-ci.com/user/build-configuration/">doc</a> 。其实一般比较简单、独立的项目，并不会用到里面的每一个操作，有时候只需配置<code>script</code>就行了。比如我的简单程序，我只需要看是否能编译通过以及跑过测试用例，我就把这些操作写在<code>build_and_test.sh</code>里面，然后这么写：</p>

<pre><code>language: cpp

script: 
    - ./build_and_test.sh
</code></pre>

<h2>开启服务</h2>

<p>配置文件编写好之后，你还需要登录<a href="http://travis-ci.org">http://travis-ci.org</a>来开启对于某个Repository的持续集成服务。</p>

<p><img class="center" src="http://quxiao.github.io/images/2014-02-24/20140224-2.png"></p>

<h2>Push</h2>

<p>万事俱备，就差你push来触发服务了！每次你进行push操作，都会在travis-ci的虚拟环境下进行build操作（除非你的comment里面写着<code>[ci skip]</code>）。你可以自己看到每次build的结果。</p>

<p><img class="center" src="http://quxiao.github.io/images/2014-02-24/20140224-1.png"></p>

<p>BTW，travis-ci还会为最近一次的build结果生成图片链接（点击上面的<code>build xxx</code>小图标即可），你可以把它放到Repository中的README中，这样在Github上面就能随时看到build的结果了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Typelist && Abstract Fatory]]></title>
    <link href="http://quxiao.github.io/blog/2014/01/31/typelist-and-abstract-fatory/"/>
    <updated>2014-01-31T14:35:26+08:00</updated>
    <id>http://quxiao.github.io/blog/2014/01/31/typelist-and-abstract-fatory</id>
    <content type="html"><![CDATA[<p>上一篇博客讲到了模板元编程中的Typelist，这种技术能够让编译器帮你生成许多结构类似的代码，省去了程序员自己编写代码的时间以及一些运行时的效率损失。设计模式中的Abstract Factory，其Template MetaProgramming版本也依赖于TypeList技术。</p>

<h1>普通实现</h1>

<p>Abstract Factory模式，即规定了一组抽象产品（Abstract Product）的接口，再由各个具体的Factory生成不同组的具体产品（Concrete Product）。我一下子想到了公司的RD、QA以及PM，就以这三种角色为例吧。（虽然不是很恰当，因为不同级别的不同职位是可以共存的）</p>

<p>普通的代码一般会写成这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">AbstractFactory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">RD</span><span class="o">*</span> <span class="n">create_RD</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">QA</span><span class="o">*</span> <span class="n">create_QA</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">PM</span><span class="o">*</span> <span class="n">create_PM</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">JuniorFactory</span><span class="o">:</span> <span class="k">public</span> <span class="n">AbstractFactory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">RD</span><span class="o">*</span> <span class="n">create_RD</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="n">JuniorRD</span><span class="p">();}</span>
</span><span class='line'>    <span class="n">QA</span><span class="o">*</span> <span class="n">create_QA</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="n">JuniorQA</span><span class="p">();}</span>
</span><span class='line'>    <span class="n">PM</span><span class="o">*</span> <span class="n">create_PM</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="n">JuniorPM</span><span class="p">();}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SeniorFactory</span><span class="o">:</span> <span class="k">public</span> <span class="n">AbstractFactory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">RD</span><span class="o">*</span> <span class="n">create_RD</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="n">SeniorRD</span><span class="p">();}</span>
</span><span class='line'>    <span class="n">QA</span><span class="o">*</span> <span class="n">create_QA</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="n">SeniorQA</span><span class="p">();}</span>
</span><span class='line'>    <span class="n">PM</span><span class="o">*</span> <span class="n">create_PM</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="n">SeniorPM</span><span class="p">();}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//使用方代码</span>
</span><span class='line'><span class="n">AbstractFactory</span><span class="o">*</span> <span class="n">fact</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="cm">/**/</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fact</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JuniorFactory</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">(</span><span class="cm">/**/</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fact</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SeniorFactory</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">RD</span><span class="o">*</span> <span class="n">rd</span> <span class="o">=</span> <span class="n">fact</span><span class="o">-&gt;</span><span class="n">create_RD</span><span class="p">();</span>
</span><span class='line'><span class="c1">//...</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出来，每一个具体的Factory类只是重复的实现AbstractFactory提供的接口，唯一的不同就是填写具体的类名，其它的语句都是重复的。（我不得不在编写以上代码的时候使用了Vim的替换功能）</p>

<!--more-->


<h1>定义接口</h1>

<p>有了Typelist，我们可以联想到，如果有了一个Typelist例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">TypeList</span><span class="o">&lt;</span><span class="n">RD</span><span class="p">,</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">QA</span><span class="p">,</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">PM</span><span class="p">,</span> <span class="n">NullType</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>再加上一个模板函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span><span class="o">*</span> <span class="n">create</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">T</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>应该就可以生成一组接口了吧！但是有个问题，如何根据Typelist中的每一个类，生成一个对应的接口呢？这里用到了一种技巧，能够根据Typelist，生成一个<strong>松散结构</strong>的复杂类，这个复杂类中就声明了一组接口。其代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Scatter Hierarchy</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">TypeList</span><span class="p">,</span> <span class="k">template</span><span class="o">&lt;</span><span class="n">class</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Unit</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ScatterHierarchy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">Head</span><span class="p">,</span> <span class="k">class</span> <span class="nc">Tail</span><span class="p">,</span> <span class="k">template</span><span class="o">&lt;</span><span class="n">class</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Unit</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ScatterHierarchy</span><span class="o">&lt;</span><span class="n">TypeList</span><span class="o">&lt;</span><span class="n">Head</span><span class="p">,</span> <span class="n">Tail</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">Unit</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">:</span> <span class="k">public</span> <span class="n">ScatterHierarchy</span><span class="o">&lt;</span><span class="n">Head</span><span class="p">,</span> <span class="n">Unit</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">,</span> <span class="k">public</span> <span class="n">ScatterHierarchy</span><span class="o">&lt;</span><span class="n">Tail</span><span class="p">,</span> <span class="n">Unit</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">SingleType</span><span class="p">,</span> <span class="k">template</span><span class="o">&lt;</span><span class="n">class</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Unit</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ScatterHierarchy</span><span class="o">:</span> <span class="k">public</span> <span class="n">Unit</span><span class="o">&lt;</span><span class="n">SingleType</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">template</span><span class="o">&lt;</span><span class="n">class</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Unit</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ScatterHierarchy</span><span class="o">&lt;</span><span class="n">NullType</span><span class="p">,</span> <span class="n">Unit</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{};</span>
</span></code></pre></td></tr></table></div></figure>


<p>ScatterHierarchy类型，其模板参数有两个，一个是Typelist，这个很明显，第二个的语法有点怪，是一个<code>template template parameter</code>，他是一种类型，并且这个类型也是一个模板类，就是他规定了接口。假设实际应用中，Unit的定义是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Type2Type</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">T</span> <span class="n">OriginType</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AbstractFactoryUnit</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">T</span><span class="o">*</span> <span class="n">doCreate</span><span class="p">(</span><span class="n">Type2Type</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">AbstractFactoryUnit</span><span class="p">()</span> <span class="p">{};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样如果代入Typelist的话，我们就会得到三个AbstractFactoryUnit基类，分别是：<code>AbstractFactoryUnit&lt;RD&gt;</code>、<code>AbstractFactoryUnit&lt;QA&gt;</code>以及<code>AbstractFactoryUnit&lt;PM&gt;</code>，他们都有一个<code>doCreate</code>接口。Wait a minute，那个<code>Type2Type</code>是做什么的？里面不就是<code>typedef</code>了一下嘛！这个其实是一个tricky的技巧：<strong>让不同接口的doCreate函数有不同的函数签名</strong>。这样当我调用<code>doCreate</code>接口的时候，就能让编译器确定接口是哪个Type（RD、QA or PM）的了。</p>

<p>好了，有了这些基础，就可以开始定义AbstractFactory了，其实我们仅需要继承上面的ScatterFactory即可，然后将具体的TypeList和AbstractFaUnit作为模板参数即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span>
</span><span class='line'><span class="o">&lt;</span>
</span><span class='line'><span class="k">typename</span> <span class="n">Tlist</span><span class="p">,</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Unit</span> <span class="o">=</span> <span class="n">AbstractFactoryUnit</span>     <span class="cm">/*默认模板参数*/</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AbstractFactory</span><span class="o">:</span> <span class="n">ScatterHierarchy</span><span class="o">&lt;</span><span class="n">Tlist</span><span class="p">,</span> <span class="n">Unit</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">Tlist</span> <span class="n">ProductList</span><span class="p">;</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="n">T</span><span class="o">*</span> <span class="n">create</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Unit</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;*</span> <span class="n">unit</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>   <span class="c1">//AbstractFactory是任意一个Unit&lt;T&gt;的子类, for T in Tlist</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">unit</span><span class="o">-&gt;</span><span class="n">doCreate</span><span class="p">(</span><span class="n">Type2Type</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//使用方代码，定义了三个接口的AbstractFactory</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">AbstractFactory</span>
</span><span class='line'><span class="o">&lt;</span>
</span><span class='line'><span class="n">TypeList</span><span class="o">&lt;</span><span class="n">PM</span><span class="p">,</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">RD</span><span class="p">,</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">QA</span><span class="p">,</span> <span class="n">NullType</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="n">AbstractSoftwareEngineerFactory</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>实例化</h1>

<p>现在来想想看怎么实例化一个抽象工厂。需要这样三部分元素：</p>

<ul>
<li>抽象接口（AbstractSoftwareEngineerFactory提供）</li>
<li>实例Typelist（<code>TypeList&lt;JuniorRD, TypeList&lt;JuniorQA, Typelist&lt;JuniorPM, NullType&gt; &gt; &gt;</code>）</li>
<li>实例函数（当用户代码为<code>create&lt;RD&gt;()</code>时，能够<code>new JuniorRD();</code>）</li>
</ul>


<p>前两部分都比较容易提供，第三部分的实例函数怎么提供呢？怎么能够一一对应上呢？初步的想法是：AbstractSoftwareEngineerFactory中有Abstract Product（RD / QA / PM），实例Typelist中有Concrete Product（Junior RD / Junior QA / Junior PM），能够把这两种Typelist中的第一个类型（<code>TypeList::Head</code>）对应起来，并且实现了<code>doCreate</code>接口，接着再用递归的思想将剩下的Type依次实现即可！</p>

<p>模板元编程中的递归思想，其表现形式我想到了两种：1）类继承；2）模板特化。另外还需考虑到的是，这种递归应该是一种<strong>线性式</strong>的，因为需要按顺序遍历Typelist。与之前提到过的ScatterHierarchy实现类似，还有一种技术能够生成一种线性式的类继承关系——<strong>LinearHierarchy</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Linear Hierarchy</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span>
</span><span class='line'><span class="o">&lt;</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Tlist</span><span class="p">,</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">SingleType</span><span class="p">,</span> <span class="k">class</span> <span class="nc">Base</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Root</span> <span class="o">=</span> <span class="n">NullType</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">LinearHierarchy</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span>
</span><span class='line'><span class="o">&lt;</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Head</span><span class="p">,</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Tail</span><span class="p">,</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="n">class</span><span class="p">,</span> <span class="n">class</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Root</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">LinearHierarchy</span><span class="o">&lt;</span><span class="n">TypeList</span><span class="o">&lt;</span><span class="n">Head</span><span class="p">,</span> <span class="n">Tail</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">Unit</span><span class="p">,</span> <span class="n">Root</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">:</span> <span class="k">public</span> <span class="n">Unit</span><span class="o">&lt;</span> <span class="n">Head</span><span class="p">,</span> <span class="n">LinearHierarchy</span><span class="o">&lt;</span><span class="n">Tail</span><span class="p">,</span> <span class="n">Unit</span><span class="p">,</span> <span class="n">Root</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="p">{};</span>    <span class="c1">//Head被“提取”出来了</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span>
</span><span class='line'><span class="o">&lt;</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">T</span><span class="p">,</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="n">class</span><span class="p">,</span> <span class="n">class</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Root</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">LinearHierarchy</span><span class="o">&lt;</span><span class="n">TypeList</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">NullType</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">Unit</span><span class="p">,</span> <span class="n">Root</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">:</span> <span class="k">public</span> <span class="n">Unit</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">Root</span><span class="o">&gt;</span> <span class="p">{};</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果，我们将Tlist设置为Concrete Product的Typelist，Root中含有Abstract Product的Typelist，这样就不难找到对应关系了。别忘了，AbstractSoftwareEngineerFactory中就含有Abstract Product，Root用它就好了。</p>

<p>那么对于<code>RD / QA / PM</code>的例子，生成的类之间的继承关系就会如下所示（最上面是基类）：</p>

<pre><code>   ASF
    |
Unit&lt;PM, ASF&gt;
    |
LinearHierarchy&lt;TypeList(PM), ASF&gt;
    |
Unit&lt;QA, LinearHierarchy&lt;TypeList(PM), ASF&gt;
    |
LinearHierarchy&lt;TypeList(QA, PM), ASF&gt;
    |
Unit&lt;RD, LinearHierarchy&lt;TypeList(QA, PM), ASF&gt;
    |
LinearHierarchy&lt;TypeList(RD, QA, PM), ASF&gt;
    |
ConcreteFactory
</code></pre>

<p>对于Unit，我们可以这样实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">ConcreteProduct</span><span class="p">,</span> <span class="k">class</span> <span class="nc">Base</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">OpNewUnit</span><span class="o">:</span> <span class="k">public</span> <span class="n">Base</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">//AbstractSoftwareEngineerFactory中的TypeList</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">Base</span><span class="o">::</span><span class="n">ProductList</span> <span class="n">BaseProductList</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">//将Abstract Product中的Head“吃掉”，将Tail作为整个Typelist传至子类，精妙！</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">BaseProductList</span><span class="o">::</span><span class="n">Tail</span> <span class="n">ProductList</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">BaseProductList</span><span class="o">::</span><span class="n">Head</span> <span class="n">AbstractProduct</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ConcreteProduct</span><span class="o">*</span> <span class="n">doCreate</span><span class="p">(</span><span class="n">Type2Type</span><span class="o">&lt;</span><span class="n">AbstractProduct</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">ConcreteProduct</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，终于可以实例化一个工厂模板类了，只需继承一个含有以上三部分元素（抽象接口、具体TypeList、实例函数）的LinearHierarchy模板类就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span>
</span><span class='line'><span class="o">&lt;</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">AF</span><span class="p">,</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">ConcreteProductTypeList</span><span class="p">,</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="n">class</span><span class="p">,</span> <span class="n">class</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Creator</span> <span class="o">=</span> <span class="n">OpNewUnit</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ConcreteFactory</span><span class="o">:</span> <span class="k">public</span> <span class="n">LinearHierarchy</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Reverse</span><span class="o">&lt;</span><span class="n">ConcreteProductTypeList</span><span class="o">&gt;::</span><span class="n">Result</span><span class="p">,</span> <span class="n">Creator</span><span class="p">,</span> <span class="n">AF</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">AF</span><span class="o">::</span><span class="n">ProductList</span> <span class="n">ProductList</span><span class="p">;</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">ConcreteProductTypeList</span> <span class="n">ConcreteProductList</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//使用方代码</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">ConcreteFactory</span>
</span><span class='line'><span class="o">&lt;</span>
</span><span class='line'>    <span class="n">AbstractSoftwareEngineerFactory</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">JuniorRD</span><span class="p">,</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">JuniorQA</span><span class="p">,</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">JuniorPM</span><span class="p">,</span> <span class="n">NullType</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">JuniorFactory</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">ConcreteFactory</span>
</span><span class='line'><span class="o">&lt;</span>
</span><span class='line'>    <span class="n">AbstractSoftwareEngineerFactory</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">SeniorRD</span><span class="p">,</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">SeniorQA</span><span class="p">,</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">SeniorPM</span><span class="p">,</span> <span class="n">NullType</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">SeniorFactory</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">AbstractSoftwareEngineerFactory</span><span class="o">*</span> <span class="n">junior_fact</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JuniorFactory</span><span class="p">;</span>
</span><span class='line'><span class="n">PM</span><span class="o">*</span> <span class="n">pm</span> <span class="o">=</span> <span class="n">junior_fact</span><span class="o">-&gt;</span><span class="n">create</span><span class="o">&lt;</span><span class="n">PM</span><span class="o">&gt;</span><span class="p">();</span> <span class="c1">//&quot;junior PM&quot;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">pm</span><span class="o">-&gt;</span><span class="n">get_title</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">AbstractSoftwareEngineerFactory</span><span class="o">*</span> <span class="n">senior_fact</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SeniorFactory</span><span class="p">;</span>
</span><span class='line'><span class="n">RD</span><span class="o">*</span> <span class="n">rd</span> <span class="o">=</span> <span class="n">senior_fact</span><span class="o">-&gt;</span><span class="n">create</span><span class="o">&lt;</span><span class="n">RD</span><span class="o">&gt;</span><span class="p">();</span> <span class="c1">//&quot;seinor RD&quot;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">rd</span><span class="o">-&gt;</span><span class="n">get_title</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可能你会看到，上面的代码用到了<code>Reverse</code>，把使用方的ConcreteProductList给反转过来，这是为什么呢？可以再看下<code>OpNewUnit</code>的实现，它是将AbstractProductList中的Head去掉之后，将剩下的部分传递至<strong>子类</strong>，而根据<code>LinearHierarchy</code>的实现，在ConcreteProductList中越是头部的类，越是在子类中，所以需要将其中一个ProductList给反转过来，以便让<code>OpNewUnit</code>中的<code>BaseProductList::Head</code>和模板参数<code>ConcreteProduct</code>能够对应起来。关于<code>Reverse</code>的实现，可以查看上一篇文章的最后部分。</p>

<h1>参考资料</h1>

<ul>
<li><a href="http://book.douban.com/subject/1119904/">《C++设计新思维》</a> TypeList &amp;&amp; AbstractFactory章节</li>
</ul>


<p>&mdash; EOF &mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模板元编程中的Typelist]]></title>
    <link href="http://quxiao.github.io/blog/2014/01/23/typelist-in-template-metaprogramming/"/>
    <updated>2014-01-23T00:00:00+08:00</updated>
    <id>http://quxiao.github.io/blog/2014/01/23/typelist-in-template-metaprogramming</id>
    <content type="html"><![CDATA[<p>前段时间在看其他同事的代码，无意间看了类似下面的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">TypeList</span><span class="o">&lt;</span> <span class="n">FilterA</span><span class="p">,</span>
</span><span class='line'><span class="n">TypeList</span><span class="o">&lt;</span> <span class="n">FilterB</span><span class="p">,</span>
</span><span class='line'><span class="n">TypeList</span><span class="o">&lt;</span> <span class="n">FilterC</span><span class="p">,</span>
</span><span class='line'><span class="n">TypeList</span><span class="o">&lt;</span> <span class="n">FilterD</span><span class="p">,</span>
</span><span class='line'><span class="n">TypeList</span><span class="o">&lt;</span> <span class="n">FilterE</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">Filters</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>感觉代码风格略微诡异了些，怎么像是LISP，呵呵。后来查了些资料，得知这就是我一直心仪已久的模板元编程中的一种技巧——<strong> Typelist</strong> 。</p>

<!--more-->


<p>当你需要对于大量的类型进行相似的操作时，比如对于返回的商品进行五种类型的过滤，许多（手工写的）代码都是重复、冗余的，代码可能是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">Goods</span><span class="o">*</span> <span class="n">goods</span> <span class="o">=</span> <span class="n">get_goods</span><span class="p">(</span><span class="n">goods_id</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">goods_blacklist</span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="n">goods</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">cate_blacklist</span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="n">goods</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">stock_blacklist</span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="n">goods</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//...</span>
</span></code></pre></td></tr></table></div></figure>


<p>显然代码是很冗余的，再抽象一下，也许可以写成这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="n">FilterBase</span><span class="o">*&gt;</span> <span class="n">filters</span><span class="p">;</span>
</span><span class='line'><span class="n">filters</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="k">new</span> <span class="n">GoodsBlacklist</span><span class="p">());</span>
</span><span class='line'><span class="n">filters</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="k">new</span> <span class="n">CateBlacklist</span><span class="p">());</span>
</span><span class='line'><span class="n">filters</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="k">new</span> <span class="n">StockBlacklist</span><span class="p">());</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'><span class="n">Goods</span><span class="o">*</span> <span class="n">goods</span> <span class="o">=</span> <span class="n">get_goods</span><span class="p">(</span><span class="n">goods_id</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">filters</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">filters</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">do_filter</span><span class="p">(</span><span class="n">goods</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码整洁了一些，不过还是需要程序在运行时<code>new</code>出来各种类、加入到集合中、然后还要考虑调用虚函数的成本，仍然不是高效的。这个时候，Typelist就派上用场了，他可以让编译器帮你自动生成许多类（而不是类的实例）的集合，并且可以像链表一样对这些类进行遍历，从而达到自动进行相似、重复工作的效果。</p>

<h1>定义Typelist</h1>

<p>首先来看看如何定义一个Typelist吧</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">H</span><span class="p">,</span> <span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">TypeList</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">H</span> <span class="n">Head</span><span class="p">;</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">T</span> <span class="n">Tail</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先，把这些类的集合看做是一个链表，这个链表的类型叫做<code>Type</code>，当然也可以是其它名称。假设有N个类型，链表的第0个类型是H，后面的<code>1 ~ N-1</code>组成一个联合类型T。接着，我们需要考虑一些特殊情况，这时候就需要用到<strong>模板特化</strong>了。首先，如果<code>1 ~ N-1</code>也是<code>Type</code>类型的时候，该如何定义呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">H</span><span class="p">,</span> <span class="k">typename</span> <span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">H</span><span class="p">,</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">:</span> <span class="k">public</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">H</span> <span class="n">Head</span><span class="p">;</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">Tail</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，就可以表示当Type的后一个模板参数也是一个Type类型时，Type类型应该是个什么样子，也就可以让Type类型无限延展下去了。最后，还需要考虑Type链表的最后一个元素应该如何定义。链表里面表示最后一个元素可以用<code>NULL</code>，那么我们在这边可以用一个没有任何意义的<code>NullType</code>类型、或者简单使用<code>void</code>表示Type链表的终结。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">strcut</span> <span class="n">NullType</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">H</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">H</span><span class="p">,</span> <span class="n">NullType</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">H</span> <span class="n">Head</span><span class="p">;</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">NullType</span> <span class="n">Tail</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面三种定义就覆盖了Typelist中所以可能的情况，当我们写出类似<code>TypeList&lt; FilterA, TypeList&lt; FilterB, TypeList&lt; FilterC, NullType &gt; &gt; &gt;</code>的时候，编译器就能自动帮我们进行匹配，并且自动生成一种复杂的类型！</p>

<h1>遍历TypeList</h1>

<p>既然定义好了，下面就可以对这个类型列表进行遍历了。以过滤商品这个场景为例，我们需要一个Filters，里面包含几种过滤方式，这几种过滤方式组成一个TypeList。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">Goods</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">BlacklistFilter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">static</span> <span class="n">do_filter</span><span class="p">(</span><span class="n">Goods</span><span class="o">&amp;</span> <span class="n">goods</span><span class="p">)</span> <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;BlacklistFilter&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">CateFilter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">static</span> <span class="n">do_filter</span><span class="p">(</span><span class="n">Goods</span><span class="o">&amp;</span> <span class="n">goods</span><span class="p">)</span> <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;CateFilter&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">StockFilter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">static</span> <span class="n">do_filter</span><span class="p">(</span><span class="n">Goods</span><span class="o">&amp;</span> <span class="n">goods</span><span class="p">)</span> <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;StockFilter&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">BlacklistFilter</span><span class="p">,</span>
</span><span class='line'>        <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">CateFilter</span><span class="p">,</span>
</span><span class='line'>        <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">StockFilter</span><span class="p">,</span>
</span><span class='line'>        <span class="n">NullType</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'>        <span class="n">FilterList</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外还需要定义一个模版类，用于遍历这些Filter并根据商品实例的属性进行判断。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Tlist</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">GoodsFilters</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">static</span> <span class="n">filter</span><span class="p">(</span><span class="n">Goods</span><span class="o">&amp;</span> <span class="n">goods</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Tlist</span><span class="o">::</span><span class="n">Head</span><span class="o">::</span><span class="n">do_filter</span><span class="p">(</span><span class="n">goods</span><span class="p">)</span>        <span class="c1">//第一个Filter的过滤结果</span>
</span><span class='line'>            <span class="o">&amp;&amp;</span> <span class="n">GoodsFilters</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Tlist</span><span class="o">::</span><span class="n">Tail</span><span class="o">&gt;::</span><span class="n">filter</span><span class="p">(</span><span class="n">goods</span><span class="p">);</span>   <span class="c1">//剩下的Filters的过滤结果</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//终结情况</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">GoodsFilters</span><span class="o">&lt;</span><span class="n">NullType</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">static</span> <span class="n">filter</span><span class="p">(</span><span class="n">Goods</span><span class="o">&amp;</span> <span class="n">goods</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="kc">true</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Goods</span> <span class="n">example_goods</span><span class="p">;</span>
</span><span class='line'><span class="n">GoodsFilters</span><span class="o">&lt;</span><span class="n">FilterList</span><span class="o">&gt;::</span><span class="n">filter</span><span class="p">(</span><span class="n">example_goods</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终输出结果：</p>

<pre><code>BlacklistFilter
CateFilter
StockFilter
</code></pre>

<p>这样，对于Typelist的遍历就完成了，使用方无需编写代码显式调用每一个类型的过滤函数，一切都由编译器帮你完成了！ : )</p>

<h1>核心思想 —— 递归</h1>

<p>使用了Typelist（或者说是MetaProgramming）技术之后，感觉其最核心的就是递归的思想（通过模板特化来体现）。我们平时写的递归算法，各种分支、结束条件都需要自己判断，而Typelist只需要把各种典型的条件一一罗列出来即可，编译器会很聪明的对你的代码进行<strong>编译时if判断</strong>。TypeList中，还有许多用到了递归的地方，比方说计算Typelist的长度、通过下标获取类型、根据类型或者实例对应的值、Append操作、Reverse操作等等。其中Append操作以及Reverse操作比较经典，样例代码如下，大家可以体会下递归的精妙：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//Append操作，将一个类型添加至一个TypeList末尾</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Tlist</span><span class="p">,</span> <span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Append</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Append</span><span class="o">&lt;</span><span class="n">NullType</span><span class="p">,</span> <span class="n">NullType</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">NullType</span> <span class="n">Result</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Append</span><span class="o">&lt;</span><span class="n">NullType</span><span class="p">,</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">NullType</span><span class="o">&gt;</span> <span class="n">Result</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">H</span><span class="p">,</span> <span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Append</span><span class="o">&lt;</span><span class="n">TypeList</span><span class="o">&lt;</span><span class="n">H</span><span class="p">,</span> <span class="n">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">H</span><span class="p">,</span> <span class="k">typename</span> <span class="n">Append</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">S</span><span class="o">&gt;::</span><span class="n">Result</span> <span class="o">&gt;</span> <span class="n">Result</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">H</span><span class="p">,</span> <span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Append</span><span class="o">&lt;</span><span class="n">NullType</span><span class="p">,</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">H</span><span class="p">,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">TypeList</span><span class="o">&lt;</span><span class="n">H</span><span class="p">,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">Result</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//Reverse操作，将TypeList反转过来，例如：TypeList&lt;A, TypeList&lt;B, TypeList&lt;C, NullType&gt; &gt; &gt;    =&gt;  TypeList&lt;C, TypeList&lt;B, TypeList&lt;A, NullType&gt; &gt; &gt;</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Tlist</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Reverse</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Tlist</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Reverse</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">Append</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Reverse</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Tlist</span><span class="o">::</span><span class="n">Tail</span><span class="o">&gt;::</span><span class="n">Result</span><span class="p">,</span> <span class="k">typename</span> <span class="n">Tlist</span><span class="o">::</span><span class="n">Head</span><span class="o">&gt;::</span><span class="n">Result</span>
</span><span class='line'>            <span class="n">Result</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Reverse</span><span class="o">&lt;</span><span class="n">NullType</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">NullType</span> <span class="n">Result</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h1>参考资料</h1>

<ul>
<li><a href="http://book.douban.com/subject/1119904/">《C++设计新思维》</a> （很可惜，这么好的书，居然市面上买不到了，看了同事的英文原版，然后在淘宝上买了D版，罪过罪过）</li>
<li><a href="http://loki-lib.sourceforge.net/html/a00681.html">Loki-lib TypeList</a>  《C++设计新思维》这本书中讲解的Loki库中对应TypeList部分</li>
<li><a href="http://aszt.inf.elte.hu/~gsd/halado_cpp/ch06.html">http://aszt.inf.elte.hu/~gsd/halado_cpp/ch06.html</a>  网上搜到的匈牙利罗兰大学的网上教程，也是基本上讲解Loki库的</li>
</ul>


<p>&mdash; EOF &mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从2013到2014]]></title>
    <link href="http://quxiao.github.io/blog/2014/01/01/from_2013_to_2014/"/>
    <updated>2014-01-01T00:00:00+08:00</updated>
    <id>http://quxiao.github.io/blog/2014/01/01/from_2013_to_2014</id>
    <content type="html"><![CDATA[<p><img src="http://quxiao.github.io/images/2014-01-01/year_of_hourse.jpg" alt="pic" /></p>

<p>2013年就这么过去了，感觉时间如白驹过隙，转瞬即逝。我现在仍然清晰地记得2013年过年回家时的情景，仿佛就是前段时间发生的，可是一转眼，马上又要过春节了。</p>

<p>回首2013，最大的感觉还是时间过得飞快，一周又一周，感觉没做啥事情就这样过去了。每天忙忙碌碌的工作，晚上属于自己的时间越来越少了，即使有一些，也感觉没有精力去充分利用了。我使劲想了想，大概可以说的，也就这么几件事吧。</p>

<h1>部门变动了</h1>

<p>年初和同事一起做广告方面的项目，感觉做的还是挺有意思的。但是没过多久，就被Boss调去做另外一个电商方面的项目，被调过去的原因是我之前“兼职”负责过那个项目的一些统计工作。（不由感慨，一旦你在其他人心中被打上了某些tag，想要改变就会十分困难。比如你做过统计相关的事情，以后当有统计相关的其它工作时，Boss第一个想到的估计就是你，因为你这方面最容易上手，人力成本最低。）之后，就在新的团队一直干着，但是由于项目前景一直很惨淡却又倍受领导重视，直接导致项目组的每一位成员的工作强度都很大，有时候上线会上到凌晨2、3点，实实在在的狼性了一把。期间一些同学一方面承受不了这样的强度，一方面估计也觉得项目没啥前途，纷纷离开了项目组或者公司，其中包括了我的Boss和项目的大Boss。不过，大部分的同学还是任劳任怨，一直坚持到现在。</p>

<h1>锻炼算是一直坚持着</h1>

<p>虽然工作的强度略大，不过我还是一有空就去健身房锻炼，工作日如果能正常下班（19点之前），并且还有体力的话，我就会去健身房；周末只要不回南京老家，我基本上两天都会去。去跑跑步、做做器械，虽然我还没有练出健壮的肌肉，但至少身材还是一直保持着，没有向有些搞IT的同学，自从上班之后身体就逐渐发福。</p>

<p>另外，在气候适合的情况下，我也会找同事一起打打篮球，周末或者过节在家的话，我有机会也会去爬紫金山，算是锻炼比较勤快了。</p>

<h1>经常回家看看</h1>

<p>自从来上海工作之后，我基本都保持每两周就回家一次的习惯，回家多陪陪父母，和父亲聊聊体育、聊聊新闻，听母亲唠叨一些家长里短，另外偶尔也会回学校看看学弟学妹以及老师。在上海，每隔两三天，我也会打个电话给父母，报个平安。</p>

<p>经常回家的另外一个原因，是可以吃到好吃的东西，在公司周围吃饭比较贵，而且吃饭的地方也就这么几家，早就吃腻了。</p>

<h1>多认识了些朋友</h1>

<p>工作方面，由于加入了新的项目组，所以又多认识了些同事，其中包括只在hi上交流过的大搜的同事、“人数众多”的产品经理们、和我们一起开发一起上线的FE同学等等，可以说自己这一年的绝大部分的时间都花在了和他们交流上。</p>

<p>生活方面，又多认识了一些女生（我目前是一名单身男性，你懂的），虽然没能和她们进一步的发展，虽然有的只匆匆见过一面，但是和大部分还算是交了朋友，偶尔也会在微博或者微信上面有所交流，对于身在异乡的我来说，这还是挺不错的，不是吗？</p>

<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-华丽的分割线&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</p>

<p>2013年，有很多地方做的还不是很好。比如，技术方面感觉没太大长进，一直想学的英语也没有坚持下去。2014年，也不想去过度设计这一年，只希望自己能好好利用时间静下心来做一些事情，比如技术、比如健身、比如旅游。</p>

<ul>
<li>希望能将后端相关的技术再深入研究、平时多写一些开源项目、多写些技术博客，自认为自己是个做技术的，技术才是我的立足之本！我就是想好好做一名技术“工匠”，尽可能的少一些扯皮的事情。</li>
<li>希望能继续坚持锻炼，保持良好的作息习惯，13年做的不错，14年继续保持！</li>
<li>希望2014年能多到些地方看看，13年准备的台湾行没能如愿，希望14年能够实现。</li>
<li>如果时间和精力允许的情况下，我还想把英语好好学起来，以便我能和国外的同行交流，多学习学习国外的先进技术。</li>
</ul>


<p>就列这四点吧，如果这些都能完成，已经相当不错了。</p>

<p>&mdash;EOF&mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Information Retrieval in Practice》笔记——整体架构]]></title>
    <link href="http://quxiao.github.io/blog/2013/11/30/information_retrievial_in_practice_note_architecture/"/>
    <updated>2013-11-30T00:00:00+08:00</updated>
    <id>http://quxiao.github.io/blog/2013/11/30/information_retrievial_in_practice_note_architecture</id>
    <content type="html"><![CDATA[<p>对于一个典型的搜索引擎，至少包含两大部分：1）建立索引；2）query查询。</p>

<h1>建立索引</h1>

<p>主要流程如下图所示：</p>

<p><img src="http://quxiao.github.io/images/2013-11-30/index-building.png"></p>

<p>主要工作为：获取需要检索的数据，将其转化为系统可以识别的方式，做一些预处理，最后持久化存储起来。</p>

<h2>本文获取 (Text Accquisition)</h2>

<p><strong> 爬虫 </strong></p>

<p>本文获取就是将所需要的数据“抓”下来。其中，依据搜索引擎的使用场景不同(网站内部检索/全网检索/文件系统检索/&hellip;)，需要检索的数据可以是全网、某个网站的网页、数据库的表、或者磁盘上面的文件等等，这样就需要不同类型的“爬虫”。另外，也可以像<code>RSS</code>这样的流式访问数据的标准。</p>

<p>获取到所需要的数据，这只完成了一部分。另外，当数据源有更新时（网页修改/数据库新增了数据/&hellip;），爬虫需要能及时的感知并且重新抓取数据提供给检索系统。而且，不同类型的数据，对于实时性的要求是不一样的。比如，一个发布新闻网站和和一个保存历史资料的网站，它们网页的实时性要求肯定是不一样的。</p>

<p><strong> 转换 </strong></p>

<p>文本获取到了，需要将其统一成搜索引擎可以识别的格式，文本转换包含两层含义：</p>

<ul>
<li><strong>将不同格式标准的数据转换为统一的格式</strong></li>
</ul>


<p>例如，同样的记录书籍内容的文档，一个是<code>XML</code>格式的，一个是<code>JSON</code>格式的。爬虫如果想获取书籍的名称、作者、<code>ISBN</code>等信息，就需要采用不同的解析方式。</p>

<ul>
<li><strong>将不同编码的文本转化为统一编码</strong></li>
</ul>


<p>有的网页是<code>UTF-8</code>编码的，有的是<code>GB18030</code>编码的，都需要统一成一个编码。</p>

<p><strong> 存储 </strong></p>

<p>数据（数据本身以及MetaData）获取到了，也转成统一格式了，下面就得想办法把数据持久化。持久化的方式有很多种，比如可以是本地文件系统、分布式文件系统（HDFS）、各种数据库（MYSQL / MongoDB）等等。</p>

<h2>文本变形 (Text Transformation)</h2>

<p><strong> 切词 &amp;&amp; 归一化 </strong></p>

<p>检索索引之前，需要先将文本转化为一系列的term，term可以理解为有意义的最小单位词语，比如：</p>

<blockquote><p>GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers.</p></blockquote>

<p>就会生成<code>github</code>, <code>best</code>, <code>place</code>, <code>share</code>, <code>code</code>, <code>friend</code>, <code>co-worker</code>, <code>classmate</code>, <code>complete</code>, <code>stranger</code>这些term。其中会将<code>is</code>, <code>the</code>等没有实际意义的单词去掉，然后做归一化，比如大小写转换，单复数转换等。</p>

<p>中文一句话中没有空格表示停顿，转化term会更复杂，比如上学时老师举的一个例子：</p>

<blockquote><p>南京市长江大桥</p></blockquote>

<p>应该需要切成<code>南京市</code>, <code>长江</code>以及<code>大桥</code>，而不是<code>南京</code>, <code>市长</code>, <code>江大桥</code></p>

<p><strong> 质量度 </strong></p>

<p>除了获取已经归一化的、数据所需要表达的信息之外，还需要对这份数据本身的质量做一个判断，相当于一个小网站发布的新闻和一个大网站发布的新闻，按照常理明显后者的质量、可信度等因素要优化前者。（在某些国家，事实真的是这样吗？ :P ）。<code>PageRank</code>算法就是一个例子，采用迭代的方式，通过网页链接（也就是网页的出度和入度）来计算该网页的质量度。</p>

<h2>构建索引</h2>

<p>一般来说，倒排索引的结构是这样的：</p>

<pre><code>term1 -&gt; (docid_1, data_11), (docid_2, data_12), ...
term2 -&gt; (docid_2, data_21), (docid_3, data_22), ...
</code></pre>

<p>其中，term就是某一个切词的结果的签名，当然，这里的term也可以是其它信息，比如商品的分类、文章的类型等等。其实应用中需要什么样的触发方式，就可以建立对应类型的倒排。docid就是用来唯一标识一份数据的，数据可以是一个网页、一个商品等等，一般都会称其<code>Document</code>。至于data，主要是为计算doc相对于term的权重服务的，里面存储了计算权重所需要的数据。举个简单的例子，如果我们假设一篇文章中出现某个term的次数越多，这篇文章对于这个term就越相关，这时候在data数据里面存储这个term在该文章中出现的次数即可。另外，有些权重计算在建立索引的阶段就可以完成，因此这部分权重结果也会存放在data中。</p>

<p>所以，建立倒排索引的第一步，就是扫描整个数据全集，收集有关term和document的统计信息（term在doc中出现的频率，term在整个doc全集中出现的频率，term的偏移量，doc的更新时间，etc.）。接着，将数据集合，由<code>doc -&gt; (term1, term2, term3, ...)</code>转化为<code>term -&gt; (doc1, doc2, doc3, ...)</code>的倒排形式，其中包含了对term以及doc的权重计算。最后，将倒排索引dump出来，有时出于数据量和性能的考虑，还需要将索引分库存储，分库方式有两种：按document分库，以及按term进行分库。</p>

<h1>Query查询</h1>

<p>query查询的主要步骤如下图所示：</p>

<p><img src="http://quxiao.github.io/images/2013-11-30/query-processing.png" alt="pic" /></p>

<h2>User Interface</h2>

<p>对于用户来说，直接面对的是搜索引擎的Web界面，或者说是User Interface界面。UI有以下几个功能：</p>

<ol>
<li>接收用户输入，将其转化为一棵query查询树，作为排序模块的输入。query查询树节点上面的操作一般是<code>AND</code>/<code>OR</code>/<code>NOT</code>这样的布尔运算；</li>
<li>进行query变换。比如拼写检查、query推荐、query扩展；</li>
<li>展现最终的排序结果。包括：填充document信息（物料）、生成内容摘要、对关键信息进行飘红或者加粗等等。</li>
</ol>


<h2>排序</h2>

<p>排序模块决定了结果文档集合的先后顺序，文档的权重计算方法有很多种，最原始的形式可以表示成：</p>

<pre><code>Sum(qi * di)
</code></pre>

<p>其中，<code>qi</code>表示输入query的第i个term的权重，<code>di</code>表示该document相对于第i个term的权重。</p>

<p><code>qi</code>以及<code>di</code>权重的计算，一般是基于<code>tf.idf</code>的思想。<code>tf</code>(<code>term frequency</code>)，表示term在document或者query中出现的频率；而<code>idf</code>(inverse document frequncy)，则是term出现在整个document或者query全局中的频率的倒数。这种思想其实很好理解，如果一个词在一篇文章中出现了许多次，我们可以暂且认为这个词和这篇文章是相关的，但是，如果这个词在所有文章中出现的频率都很高，那么这个词就对于那篇文章来说就没有那么“特殊”了，并不能表明这个词和那篇文章就是很相关的。</p>

<h2>评估</h2>

<p>两层含义：</p>

<ul>
<li>排序相关性的评估</li>
<li>性能的评估</li>
</ul>


<p>通过算法，最终得到一份排序结果，但是由于算法的局限性、训练数据集合是否完备以及个性化等因素，用户并不一定就对排在前面的结果感兴趣。因此，需要一个评估模块，收集用户的点击行为，用于扩充算法训练数据集合，或者作为算法参数调整的依据，最终反映在排序模块中。</p>

<p>另一方面，搜索引擎的性能，也需要进行监控。通过日志就可以清楚的看到用户的一次检索，各个模块的耗时是多少，哪个模块是性能瓶颈，开发者可以有针对性的进行优化。在测试环节，QA也可以使用日志来反向构造请求，模拟线上请求。</p>

<p>（PS: 文章包含了自己的理解，可能不正确）</p>

<p>&mdash; EOF &mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“基于演示的开发”]]></title>
    <link href="http://quxiao.github.io/blog/2013/11/22/presentation-based-development/"/>
    <updated>2013-11-22T00:00:00+08:00</updated>
    <id>http://quxiao.github.io/blog/2013/11/22/presentation-based-development</id>
    <content type="html"><![CDATA[<h1>什么是“基于演示的开发”？</h1>

<p>有一天和一个同事吃饭，我们聊到了大学里面做项目的事情，他说在大学的时候，他们那流行一种说法叫“基于演示的开发”，我心想这是什么高端的软件开发方法学?原来其实就是说对于作为课程中需要完成的小项目，后台功能是真的完成了，还是fake的，这个无所谓，只要当向其他人进行演示的时候，只要系统的界面好看些，系统“看起来”是功能完整的就行了，因此取名“基于演示的开发”。</p>

<p>虽然我是第一次听到这个说法，但在学校的时候，大部分同学都是基于这套“理论”进行小项目开发的。后台真有连接数据库吗？不一定，只要把结果直接写在代码里面就可以了；点击开始运行某算法，真的运行了吗？不一定，只要把预期的结果直接返回就行了。这种“造假”，在我大学本科期间，甚至研究生期间，比比皆是。说实话，我自己也造过假，只不过比别人少很多罢了。</p>

<p> 为啥会有那么多“基于演示的开发”呢？说白了，你随便弄个可以演示的DEMO，和自己认认真真、辛辛苦苦的开发，最后的结果是一样的，前者的结果甚至会更好，我干嘛费劲呢？反正老师也就是随便看看，大部分也不会问什么细节（有的计算机专业的老师，我都对TA的计算机知识的掌握程度表示怀疑），就是个走过场。</p>

<h1>三位同学的三件事</h1>

<p>说到这里，我想起来了大学三个同学的三件事情：</p>

<p>同学A，学习挺刻苦，考试成绩很好。大学学习JAVA课程的时候，老师让每个人做一个基于JSP（全称：Java Server Pages，当年很流行的）的小网站，然后交一个设计文档。结果A同学不会写也不想写这个JSP，然后就随便写了几个HTML的网页，截个屏，写了个文档交差了，结果他截屏的时候，居然把浏览器地址栏也放进去了，地址栏里面赫然显示着<code>xxx.html</code>！我们在这个文档发回来的时候发现了A同学的“亮点”，貌似老师也没发现。。。</p>

<p>（之后同学A考研考上了某著名985大学，读完硕士，去美国读计算机博士了）</p>

<p>同学B，学习挺刻苦，考试成绩很好。本科期间倒是没什么太多的故事，他本科毕业之后，一心想读研，考了一年又一年，考了两年还是三年，好不容易考上了某著名985大学的软件学院。我平时觉得同学B编程能力也不是很强啊，为啥会选实用性较强的软件学院呢？有次我碰到他就问了他这个问题，他说，这个学校的软件学院，研究生入学考试不用考上机编程，只用做卷子和面试就可以了。。。。</p>

<p>（同学B读硕士的时候，只知道去上海某著名外企实习过一段时间，毕业之后下落不明）</p>

<p>同学C，学习上（个人感觉）不像前两位那么刻苦，不过成绩也不错。据说，只是据说，他大学四年期间，有的考试会用一些“特殊”手段，让考试成绩有所提高。这个是否属实，我不能百分之百确定，不过有次在考试的时候，他坐我旁边，的确问过我某一题选什么的，我看了看他，然后继续答题了。</p>

<p>（同学C最后因为成绩不错，最后保送本校，读博士了）</p>

<p>其实，我和这三位，都是很好的朋友，他们都不是有啥坏点子的人，大家都过着各自不同的生活，呵呵。好久没见他们，还是有些想念的。</p>

<h1>浮躁</h1>

<p>我觉得，类似这种“基于演示的开发”的出现，跟学生没太大关系，并且学生是受害者。大家从小接受的教育就是倾向于“随大流”或者“什么专业赚钱多就选什么”，很少有人因为这是自己的兴趣爱好而选择自己的专业的（至少我看我们学校本专业的是这个情况），既然学得不是自己感兴趣的东西，就没什么动力去深入挖掘其中的奥秘，需要交什么作业，随便糊弄个就完了，只要能在学校这个“system”里面玩转就行了。接着大家有的毕业去工作，有的留校当老师，优良的“传统”就在职场和校园里面一代代传下去了……</p>

<p>出现了这种现象，到底是什么原因呢？我想“浮躁”这个词可以概括，社会很浮躁、学校很浮躁、学生们也难免浮躁。算了，还是不说什么抱怨了，太多的抱怨是没有用的。还是大家各自努力吧，沉下心来做好身边的事情，每个人都少点浮躁，多点执着！</p>

<p>&mdash;EOF&mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从Wordpres迁移至Jekyll(@github.io)]]></title>
    <link href="http://quxiao.github.io/blog/2013/11/17/immigrate-from-wordpress/"/>
    <updated>2013-11-17T00:00:00+08:00</updated>
    <id>http://quxiao.github.io/blog/2013/11/17/immigrate-from-wordpress</id>
    <content type="html"><![CDATA[<p>用上Wordpress之后，总体感觉还是很不错的，安装、设置、撰写文章都很方便，但仍然有几点不足：</p>

<ol>
<li>许多功能都需要插件支持，比如代码语法高亮，首页截取文章摘要</li>
<li>图片和文章的存储方式，图片需要单独找图床、或者上传到服务器，而文章又是保存
mysql数据库中的</li>
<li>数据备份比较麻烦，每次都得使用插件或者人工备份数据</li>
</ol>


<p>因此决定将博客迁移到github上面，即免费又能使用<a href="http://jekyllrb.com/">Jekyll</a>这种静态博客，不需要配置DB、使用git发布、markdown语法。简单、方便、
很极客！</p>

<h2>建立github.io初始环境</h2>

<p>首先，你需要一个github帐号，然后使用<a href="http://jekyllbootstrap.com/">JekyllBootstrap</a>建立一个初始化的环境，参照<a href="http://jekyllbootstrap.com/usage/jekyll-quick-start.html">教程</a>一步一步来，环境很快就可以搞定。你就可以在USERNAME.github.io上面看到环境了</p>

<p>PS: 教程上面说需要建立的是USERNAME.github.com的repository，需要改为USERNAME.github.io才可以</p>

<h2>备份Wordpress数据</h2>

<p>迁移之前，先备份下数据，如果是使用VPN的话，SSH登录到服务器上，备份数据库</p>

<pre><code>mysqldump -u root -p -h localhost BLOG_TABLE &gt; BLOG_TABLE.sql
</code></pre>

<p>另外一些静态文件，比如图片什么的，也备份一份</p>

<h2>选择迁移工具</h2>

<p>迁移工具方面，基本上是基于下面两种方式：</p>

<ol>
<li>使用WordPress导出的xml文件，导出md文档</li>
<li>连接WordPress的Mysql数据库导出md文档</li>
</ol>


<p>Jekyll有自带的<code>jekyll-import</code>工具，很想使用官方的迁移工具，但我一直“未遂”，说是无法load到<code>jekyll-import</code>模块……</p>

<p>另外，Jekyll官网上还推荐了三个第三方的工具：</p>

<ol>
<li><a href="https://github.com/thomasf/exitwp">Exitwp</a></li>
<li><a href="http://vitobotta.com/how-to-migrate-from-wordpress-to-jekyll/">A great
article</a> ，
其实是一篇详细的迁移教程</li>
<li><a href="https://github.com/theaob/wpXml2Jekyll">wpXml2Jekyll</a></li>
</ol>


<p>第二个太过详细，第三个只能运行在Windows下，所以看来只能选择第一个工具了。</p>

<h2>导出WordPress XML文件</h2>

<p>在WordPress的<code>export.php</code>页面上可以轻松导出XML文件。但这一步遇到一个小插曲：blog上面太多spam评论了，结果也会一并export出来，这些spam
评论会导致后面工具导出markdown文档失败。因为blog上面真实的评论并不多，所以就考
虑把评论都删除，网上查了资料，只需要将WordPress Mysql表中的<code>wp_comments</code>表删除即可</p>

<pre><code>DROP TABLE wp_comments;
</code></pre>

<h2>使用exitwp</h2>

<p>这个工具带有鲜明的“反WordPress”风格，使用起来还是比较简单的，按照项目首页的
README操作即可，你的WordPress文章就变成一个个markdown文档了！</p>

<p>不过使用途中发现有几个问题：</p>

<ol>
<li>在Mac上使用pip进行依赖安装后，那些依赖的库还是会import失败（是我打开方式不对吗……），还是得自己将一个个依赖下载后安装</li>
<li>Exitwp虽然支持下载图片，但是文章中的图片链接却没有换过来</li>
<li>导出后的md文档，对于正文中的特殊字符没有做处理，比如<code>*</code>，会导致<code>jekyll build</code>失败，需要手动修改</li>
<li>由于系统编码原因，会导致使用exitwp以及jekyll失败，参考这篇<a href="http://www.webplay.pro/linux/set-locale-terminal-settings-mac-os-x.html">文章</a>
，需要在<code>/etc/profile</code>添加<code>export LANG=zh_CN.UTF-8</code>以及<code>export
LC_ALL=zh_CN.UTF-8</code></li>
</ol>


<h2>发布！</h2>

<p>发布之前，现在本地使用<code>jekyll server</code>或者<code>rake --preview</code>在本地预览，没问题就可以发布了。</p>

<p>好了，下面将生成的markdown文档以及图片，push到你的github空间即可！Just enjoy it! :)</p>

<p>最后，在使用markdown编写中文文章时，发现jekyll默认的markdown引擎对于中文支持不
是很好，对于对于全部为中文的列表对完全失效，需要将markdown引擎改为<code>rdiscount</code>
，在<code>_config.yaml</code>中添加：</p>

<pre><code>markdown: rdiscount
</code></pre>

<p>就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Effective Go》学习笔记]]></title>
    <link href="http://quxiao.github.io/blog/2013/10/28/effective-go-learning-note/"/>
    <updated>2013-10-28T00:29:06+08:00</updated>
    <id>http://quxiao.github.io/blog/2013/10/28/effective-go-learning-note</id>
    <content type="html"><![CDATA[<p>最近抽时间把Go语言看了一下，把Go playground玩了一遍，把官方文档上的Effective Go也学习了一番。把一些重点或者说自己觉得比较有特点的地方记录下来，用作备忘和分享。</p>

<h1>未使用的package或者变量是编译错误</h1>

<p>这相当于就在代码层面对开发人员进行了规范，不像C++等其它语言，你多include一个.h文件，或者声明了一个变量但没有使用，这对你编译程序都不会有任何影响，挺多会打些编译warning。这样很容易造成程序编译了没有使用的库和变量，使程序变得臃肿。</p>

<h1>变量的可见性有变量名决定</h1>

<p>一个package中的变量名如果首字母是大写，则对于package外部是可见的，反之则不可见。Go里面没有public, private这样的关键字（至少我目前没看到），直接约定首字母大写的变量是public的，不是大写的是private的，简便并且规范。</p>

<h1>函数可以返回多值</h1>

<p>像Python一样，Go的函数可以返回多个值，这样就很方便的把正常情况下需要返回的数据以及发生错误时error一并返回了。</p>

<h1>关键字defer——return之前执行</h1>

<p>Go里面可以将语句前声明defer关键字，表示目前先不执行这条语句，等待函数return前再执行。这实在是太方便了！特别是对于一些需要管理资源的场景。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// Contents returns the file&#39;s contents as a string.</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">Contents</span><span class="p">(</span><span class="nx">filename</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>  <span class="c1">// f.Close will run when we&#39;re finished.</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="p">[]</span><span class="kt">byte</span>
</span><span class='line'>    <span class="nx">buf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">n</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">:])</span>
</span><span class='line'>        <span class="nx">result</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="nx">n</span><span class="p">]</span><span class="o">...</span><span class="p">)</span> <span class="c1">// append is discussed later.</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nx">err</span>  <span class="c1">// f will be closed if we return here.</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">result</span><span class="p">),</span> <span class="kc">nil</span> <span class="c1">// f will be closed if we return here.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>试想一下，在C++中，如果想要在每个分支都能释放资源，就得采用1）<code>goto</code>或<code>do-while</code>，例如以下代码，或者 2）<code>scoped pointer</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">f1</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">fname</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">FILE</span><span class="o">*</span> <span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nb">NULL</span> <span class="o">==</span> <span class="n">fp</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(....)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">FINISH</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(....)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">FINISH</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nl">FINISH:</span>
</span><span class='line'>    <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">f2</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">fname</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">FILE</span><span class="o">*</span> <span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nb">NULL</span> <span class="o">==</span> <span class="n">fp</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(....)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ret</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(....)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ret</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>new &amp; make</h1>

<p>Go语言中的new和C++中的不太一样，它只负责分配一段全为<code>'\0'</code>的内存，不会进行任何其它初始化，需要你自己再做一些工作。
而make关键字是用来新建slice, map, channel这三中类型的，因为它们内部必须做一些特殊的初始化才能使用。</p>

<h1>结构体可以直接print</h1>

<p>默认情况下，struct就可以直接打印出来，而且还会打印出每个字段的名称和值。这个对于开发人员排查问题，也是极其方便的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">T</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a</span> <span class="kt">int</span>
</span><span class='line'>    <span class="nx">b</span> <span class="kt">float64</span>
</span><span class='line'>    <span class="nx">c</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">t</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">T</span><span class="p">{</span> <span class="mi">7</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.35</span><span class="p">,</span> <span class="s">&quot;abc\tdef&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%v\n&quot;</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%+v\n&quot;</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%#v\n&quot;</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>会打印出</p>

<pre><code>&amp;{7 -2.35 abc   def}
&amp;{a:7 b:-2.35 c:abc     def}
&amp;main.T{a:7, b:-2.35, c:"abc\tdef"}
</code></pre>

<p>当然，你也可以定义某个类型T的<strong>String()</strong>方法，用来改变输出的字符串，就像Python中实现<code>__str__</code>方法一样。</p>

<h1>接口“嵌入”</h1>

<p>如果想使用某套接口，在C++中一般都是将满足这套接口的实例作为某个类的成员，再调用这个成员的接口。在Go中，可以在某个接口里面直接“嵌入”其它已经实现的接口，比如需要一个ReadWriter接口，里面有Read()和Write()，但是已经有一个接口Reader里面有Read()，一个接口Writer里面有Write()，就直接使用以下代码就可以了，这样Read()和Writer()就是ReadWriter接口的方法了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Reader</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Read</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Writer</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Write</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ReadWriter is the interface that combines the Reader and Writer interfaces.</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">ReadWriter</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Reader</span>
</span><span class='line'>    <span class="nx">Writer</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>goroutine &amp;&amp; channel</h1>

<p>goroutine以及channel可以说是Go语言最重要的特性了。goroutine有一个简单的思想，它就是一个通其它goroutine运行在同一份内存空间的函数。而channel顾名思义，就是一个管道，任何数据可以通过管道进行传输，可以往channel里面放数据，可以从channel里面获取数据。goroutine和channel的配合使用，很好的解释了Go语言“<strong>Do not communicate by sharing memory; instead, share memory by communicating</strong>”的思想，还有一个很好的例子在<a href="http://talks.golang.org/2012/waza.slide#12">这里</a>，这里例子同时也讲解了并发（concurrency）和并行（parallelism）之间的关系和区别。</p>

<p>我觉得，并发是一种工作方式，它把一个整体的复杂的任务分解为小型的逻辑简单的任务；而并行就是真是的同时在做许多事情。就那例子中的任务来说，把一堆书送到另一端的火堆烧掉。如果是并行的话，就是原来是一个人“拿书-运书-烧书”，现在同时有多个人“拿书-运书-烧书”。如果是并发的话：，就是把任务可以分解为：1）一个人把一部分书从书堆中放到车子上；2）一个人把装有书的车子推到火堆旁；3）一个人把火堆旁的书烧掉。每个人各司其职，只需要从一个源头（channel或者其它地方）获取原始数据，自己进行简单的加工，然后堆到另外一边（另一个channel），自己不用管其他人是怎么工作、或者什么时候工作的，只需要把自己分内的事情完成就OK了。Divide and conquer真是一种简单精妙的思想！</p>

<p>好了，暂时就先整理到这里吧~</p>

<p>参考资料：</p>

<ul>
<li><a href="http://golang.org/doc/effective_go.html">Effetive Go</a></li>
<li><a href="http://talks.golang.org/2012/waza.slide">Concurrency is not Parallelism</a></li>
<li><a href="http://play.golang.org/">Go Playground</a></li>
</ul>


<p>&mdash;EOF&mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在脚本中使用文件锁]]></title>
    <link href="http://quxiao.github.io/blog/2013/09/01/filelock_in_script/"/>
    <updated>2013-09-01T00:04:09+08:00</updated>
    <id>http://quxiao.github.io/blog/2013/09/01/filelock_in_script</id>
    <content type="html"><![CDATA[<p>较早之前，一个模块的reload程序出现过这样一个问题：模块会定期检查一份文件是否被更新，如果被更新了，就reload；但是，如果文件正在被更新（没有写完）并且模块正好检测到更新，模块就会reload到一份不全的文件，导致数据异常。当时的解决方案是：使用一个done文件，推送文件的脚本在完成数据更新后，touch一下done，模块检测done文件的更新来判断是否reload。</p>

<p>最近这个事情又被同们事提起，不过稍微扩展了下，问题变成了：<strong>有没有一种机制，能让许多并行的脚本能串行进行一系列操作</strong>。比如多个脚本对文件进行依次读写，以免产生脏数据。无疑，如果脚本如果shell中有一种“锁”的机制，就可以解决这个问题。原来只使用过API级别的锁，脚本中的锁还真没用过。其实，如果要在shell脚本实现锁，需要满足两个条件：</p>

<ol>
<li> 一个全局可见的状态</li>
<li> 一种“检测 + 加锁”的原子操作</li>
</ol>


<p>大家可能会想到使用一个文件来当做锁，如果有这个文件，就表示某个脚本正在操作，其它脚本等待；如果没有这个文件，我就touch这个文件，然后开始我的操作。但是，“检测文件”和“新建文件”不是原子操作，所以是无法保证串行的。</p>

<p>google了一下，还是有几种满足条件的方案的。</p>

<h1>文件夹锁</h1>

<p>检测文件和新建文件无法做到原子性，但是mkdir操作，却能做到原子地检测文件夹和创建文件夹，有点儿意思！所以，当脚本想对于竞争数据进行操作，就<code>mkdir</code>某个文件夹，根据返回码得知申请所是否成功，申请成功、完成操作之后再<code>rm -rf</code>就可以实现了。例如这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span>-ne 2 <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">exit </span>1
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nv">NUM</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'>    <span class="nv">SLEEP_TIME</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">OUT_FILE</span><span class="o">=</span><span class="s2">&quot;test.out&quot;</span>
</span><span class='line'><span class="nv">LOCK_FILE</span><span class="o">=</span><span class="s2">&quot;lock.file&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> :
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span>mkdir <span class="k">${</span><span class="nv">LOCK_FILE</span><span class="k">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -ne 0 <span class="o">]</span>
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'><span class="k">        continue</span>
</span><span class='line'><span class="k">    fi</span>
</span><span class='line'><span class="k">    for</span> <span class="o">((</span><span class="nv">i</span><span class="o">=</span>0; i&lt;10; i++<span class="o">))</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;${NUM} is working in $i step!&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">OUT_FILE</span><span class="k">}</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="k">    </span>sleep <span class="k">${</span><span class="nv">SLEEP_TIME</span><span class="k">}</span>
</span><span class='line'>    rm -rf <span class="k">${</span><span class="nv">LOCK_FILE</span><span class="k">}</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h1>lockfile命令</h1>

<p>原来直接就有个专门用于文件锁的命令，这个命令比mkdir更强大，可以设置申请文件锁的等待时长、重拾次数、锁的过期时间。但是，在写测试代码的时候，却发现只会有一个脚本一直获取到文件锁，其它脚本都处于申请锁等待并超时的状态，难道我参数用的不对？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span>-ne 2 <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">exit </span>1
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nv">NUM</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'>    <span class="nv">SLEEP_TIME</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">OUT_FILE</span><span class="o">=</span><span class="s2">&quot;test.out&quot;</span>
</span><span class='line'><span class="nv">LOCK_FILE</span><span class="o">=</span><span class="s2">&quot;lock.file&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> :
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;${NUM} try to get lockfile&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">OUT_FILE</span><span class="k">}</span>
</span><span class='line'>    lockfile  <span class="k">${</span><span class="nv">LOCK_FILE</span><span class="k">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -ne 0 <span class="o">]</span>
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;${NUM} wait lock failed&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">OUT_FILE</span><span class="k">}</span>
</span><span class='line'>        <span class="k">continue</span>
</span><span class='line'><span class="k">    fi</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;${NUM} got lockfile&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">OUT_FILE</span><span class="k">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">((</span><span class="nv">i</span><span class="o">=</span>0; i&lt;10; i++<span class="o">))</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;${NUM} is working in $i step!&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">OUT_FILE</span><span class="k">}</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="k">    </span>sleep <span class="k">${</span><span class="nv">SLEEP_TIME</span><span class="k">}</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;${NUM} delete lockfile&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">OUT_FILE</span><span class="k">}</span>
</span><span class='line'>    rm -rf <span class="k">${</span><span class="nv">LOCK_FILE</span><span class="k">}</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<h1>设置noclobber + 重定向文件</h1>

<p>shell中有一个参数叫noclobber，设置了这个参数后，当脚本试图重定向文件时，如果发现改文件已经存在，重定向就会失败。这种方法自己没尝试过，下面是从网上抄来的code example：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">(</span> <span class="nb">set</span> -o noclobber; <span class="nb">echo</span> <span class="s2">&quot;locked&quot;</span> &gt; <span class="s2">&quot;$lockfile&quot;</span><span class="o">)</span> 2&gt; /dev/null; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">trap</span> <span class="s1">&#39;rm -f &quot;$lockfile&quot;; exit $?&#39;</span> INT TERM EXIT
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Locking succeeded&quot;</span> &gt;&amp;2
</span><span class='line'>  rm -f <span class="s2">&quot;$lockfile&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;Lock failed - exit&quot;</span> &gt;&amp;2
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>看来在脚本中使用文件锁，还是比较方便的。不过，在我看来在脚本中使用文件锁，有个致命弱点：操作系统不会禁止其它进程对作为锁的文件（或者文件夹）进行操作。相当于一个脚本已经申请到了文件锁并正在操作，但是其它进程完全可以不受限制的删除这个文件锁，这样就会使得期间其它脚本能够成功申请到文件锁。或者一些脚本使用文件锁对竞争资源进行操作，但其它脚本直接操作竞争资源，这种情况也是无法避免的。使用文件锁，完全靠自觉！</p>

<p>另外，文件锁也没有提供像共享锁、排它锁这样的高级功能，这也是文件锁的短板。</p>

<p>参考资料：</p>

<p><a href="http://en.wikipedia.org/wiki/File_locking">http://en.wikipedia.org/wiki/File_locking</a></p>

<p><a href="http://wiki.bash-hackers.org/howto/mutex">Lock your script (against parallel run)</a></p>

<p>&mdash;EOF&mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intrusive List]]></title>
    <link href="http://quxiao.github.io/blog/2013/07/06/intrusive-list/"/>
    <updated>2013-07-06T20:47:21+08:00</updated>
    <id>http://quxiao.github.io/blog/2013/07/06/intrusive-list</id>
    <content type="html"><![CDATA[<p>链表，应该是每一个学编程的人都会接触到的经典数据结构，大部分计算机专业的同学至少在上学期间也实现过单向、双向链表。在我的印象里，链表一般都是这么表示的：</p>

<pre><code>struct LinkNode
{
    LinkNode* prev;
    LinkNode* next;
    int my_data1;
    double my_data2;
    //...
};

class LinkList
{
    LinkNode root;
    //...
};
</code></pre>

<p>或者，我们就干脆直接是用<code>std::list&lt;T&gt;</code>。无论是哪一种，它都是将使用的数据“嵌入”到链表的节点中，或者说是节点包在数据之外。这种实现也是教科书里面讲到的那个实现，也是我之前知道的唯一的实现方式。</p>

<p>前段时间看网上的几篇博客（<a href="http://rdc.taobao.com/blog/cs/?p=1675">Tips of Linux C programming</a>，<a href="http://www.codeofhonor.com/blog/avoiding-game-crashes-related-to-linked-lists">Avoiding game crashes related to linked lists</a>），发现原来还有另外一种更优雅的链表实现——intrusive list。Linux kernel，以及许多底层软件（另外还有游戏星际争霸）的开发中，都是使用intrusive list进行链表操作的。</p>

<p>所谓intrusive list，就是指不像上面说的那样将链表节点包在数据外面，而是将链表节点包在数据里面。例如下面这样：</p>

<pre><code>struct list_node_t
{
    list_node_t* prev;
    list_node_t* next;
};

struct MyClass
{
    int data;
    list_node_t node;
};
</code></pre>

<p>这样做，是为了让节点和数据在一个数据结构中。因为许多场景下，链表包含的数据是指针（考虑到数据拷贝构造的代价，以及一份数据被多个链表共享的情况），例如<code>std::list&lt;MyClass*&gt;</code>。使用intrusive list实现，就可以省去了&#8221;节点 &ndash;> 数据指针 &ndash;> 数据&#8221;的二次查找。找到intrusive list中的一个节点后，就可以立即找到这个节点对应的数据，即我知道一个<code>list_node_t</code>的地址，我改如何找到这个<code>list_node_t</code>对应的<code>MyClass</code>的<code>data</code>呢？这里用到了一段很优美的宏：</p>

<pre><code>#define GET_ENTRY(ptr, type, member)\
    ((type *)((char *)(ptr)-(unsigned long)(&amp;((type *)0)-&gt;member)))
</code></pre>

<p>第一眼肯定觉得晕，不急，我们一步一步来。首先看参数：</p>

<ul>
<li><p>ptr: <code>list_node_t</code>的地址</p></li>
<li><p>type: 包含这个<code>list_node_t</code>的类型，对应上面的例子，就是<code>Myclass</code></p></li>
<li><p>member：这个<code>list_node_t</code>类型变量在MyClass中的变量名，需要这个得到改变量的offset</p></li>
</ul>


<p>首先看</p>

<pre><code>(&amp;((type *)0)-&gt;member)
</code></pre>

<p>这个的意思是：如果有个type类型的变量，它的地址是0，那type类型中的member变量的地址是多少，其实就是这个member变量距离所属的type类型变量的偏移量。</p>

<p>然后是</p>

<pre><code>((char *)(ptr)-(unsigned long)(&amp;((type *)0)-&gt;member))
</code></pre>

<p>这就很清楚了，知道了偏移量，我又知道了真正的member变量的地址（ptr），用ptr的地址减去ptr的偏移量，就得到了ptr所在的type变量的地址了，然后就可以获取type变量上的数据了。</p>

<p>自己简单实现了intrusive list，再和<code>std::list</code>做一个简单的性能测试，对一个int数据的链表插入，结果是：<code>std::list push_back</code>的操作操作时间基本上都在intrusive list的2倍以上！这么看来，intrusive list的优势还是挺明显的。</p>

<pre><code>QuXiaos-MacBook-Pro:intrusive_list quxiao$ ./a.out 1000
std_list: 0.129 ms
intrusive_list: 0.059 ms
QuXiaos-MacBook-Pro:intrusive_list quxiao$ ./a.out 10000
std_list: 1.297 ms
intrusive_list: 0.550 ms
QuXiaos-MacBook-Pro:intrusive_list quxiao$ ./a.out 100000
std_list: 11.961 ms
intrusive_list: 4.901 ms
QuXiaos-MacBook-Pro:intrusive_list quxiao$ ./a.out 1000000
std_list: 116.855 ms
intrusive_list: 53.086 ms
QuXiaos-MacBook-Pro:intrusive_list quxiao$ ./a.out 10000000
std_list: 1061.955 ms
intrusive_list: 544.419 ms
</code></pre>

<p>intrusive list的实现以及测试的代码如下：</p>

<div>
  <pre><code class='cpp'>#include &lt;stdlib.h&gt;
    #include &lt;stdio.h&gt;
    #include &lt;time.h&gt;
    #include &lt;list&gt;
    
    struct list_node_t
    {
        list_node_t* prev;
        list_node_t* next;
    };
    
    struct MyClass
    {
        int data;
        list_node_t node;
    };
    
    void _list_add(list_node_t* cur, list_node_t* prev, list_node_t* next)
    {
        prev-&gt;next = cur;
        next-&gt;prev = cur;
        cur-&gt;prev = prev;
        cur-&gt;next = next;
    }
    
    void list_add_head(list_node_t* cur, list_node_t* head)
    {
        _list_add(cur, head, head-&gt;next);
    }
    
    void list_add_tail(list_node_t* cur, list_node_t* head)
    {
        _list_add(cur, head-&gt;prev, head);
    }
    
    void list_del(list_node_t* cur)
    {
        cur-&gt;prev-&gt;next = cur-&gt;next;
        cur-&gt;next-&gt;prev = cur-&gt;prev;
        cur-&gt;prev = cur-&gt;next = NULL;
    }
    
    #define GET_ENTRY(ptr, type, member)\
        ((type *)((char *)(ptr)-(unsigned long)(&amp;((type *)0)-&gt;member)))
    
    #define INIT_NODE(ptr)\
        (ptr)-&gt;next = (ptr)-&gt;prev = ptr;
    
    #define list_for_each(pos, head) \
            for (pos = (head)-&gt;next; pos != (head); \
                            pos = pos-&gt;next)
    
    #define list_for_each_safe(pos, n, head) \
            for (pos = (head)-&gt;next, n = pos-&gt;next; pos != (head); \
                        pos = n, n = pos-&gt;next)
    
    void test_std_list(int run_num)
    {
        int t1 = clock();
        std::list&lt;int&gt; std_list;
        for (int i = 0; i &lt; run_num; i ++)
        {
            std_list.push_back(i);
        }
    
        printf(&quot;std_list: %.3lf ms\n&quot;, double(clock() - t1) / CLOCKS_PER_SEC * 1000);
    }
    
    void test_intrusive_list(int run_num)
    {
        int t1 = clock();
        list_node_t list_head;
        INIT_NODE(&amp;list_head);
    
        for (int i = 0; i &lt; run_num; i ++)
        {
            MyClass* c = (MyClass*) malloc(sizeof(MyClass));
            c-&gt;data = i;
            list_add_tail(&amp;c-&gt;node, &amp;list_head);
        }
        printf(&quot;intrusive_list: %.3lf ms\n&quot;, double(clock() - t1) / CLOCKS_PER_SEC * 1000);
    }
    
    int main(int argc, char** argv)
    {
        if ( argc != 2 )
        {
            fprintf(stderr, &quot;argc is not 2&quot;);
            return -1;
        }
        int run_num = atoi(argv[1]);
        if ( 0 == run_num )
        {
            fprintf(stderr, &quot;argv[%s] is not num&quot;, argv[1]);
            return -1;
        }
    
        test_std_list(run_num);
        test_intrusive_list(run_num);
    
        return 0;
    }</code></pre>
</div>


<p>另外，intrusive list还有几个特点，比如：</p>

<ul>
<li><p>移植性好，不像数据包在链表里面的实现，要么每种链表类型都写重复的代码，要么就使用template，但只能在C++中使用</p></li>
<li><p>容易使用，你需要使用哪种类型的列表，就在这种类型中添加节点即可</p></li>
<li><p>可以方便实现一份数据被多个链表共享的情况，有几个链表，就在类型下添加几个节点变量即可，多个链表直接不会互相干扰</p></li>
</ul>


<p>要不是看了那几篇博客，我对链表的认识还停留在教科书上，好歹也看了几本数据结构的书，其中不乏经典书籍，但从没有听说过intrusive list这种实现，看来很多知识，并不是光靠看书就能获取的。</p>

<p>参考材料：</p>

<ul>
<li><p><a href="http://highscalability.com/blog/2013/5/22/strategy-stop-using-linked-lists.html">Strategy: Stop Using Linked-Lists</a></p></li>
<li><p><a href="http://www.codeofhonor.com/blog/avoiding-game-crashes-related-to-linked-lists">Avoiding game crashes related to linked lists</a></p></li>
<li><p><a href="http://rdc.taobao.com/blog/cs/?p=1675">Tips of Linux C programming</a></p></li>
<li><p><a href="http://isis.poly.edu/kulesh/stuff/src/klist/">Linux Kernel Linked List Explained</a></p></li>
</ul>


<p>&mdash;EOF&mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcached源码学习——线程模型]]></title>
    <link href="http://quxiao.github.io/blog/2013/05/31/memcached_source_code_study_thread_model/"/>
    <updated>2013-05-31T09:30:39+08:00</updated>
    <id>http://quxiao.github.io/blog/2013/05/31/memcached_source_code_study_thread_model</id>
    <content type="html"><![CDATA[<p>Memcached中有以下几类线程：</p>

<ul>
<li>主线程</li>
<li>工作线程</li>
<li>维护线程</li>
</ul>


<p>主线程，又可以叫分发线程，除了完成程序的各种参数、以及其他线程的初始化以外，还会listen端口，新建连接，并且将该连接分发到其他的工作线程。</p>

<p>工作线程，大部分实际的工作都是他们干的，包括读取请求的协议内容、解析、进行具体存、取、更新、删除kv的操作，最后返回结果。</p>

<p>另外，还有一个维护线程，它的工作就是在需要的时候（存放的item大于总量的2/3）对hash表进行扩展。</p>

<p>Memcached处理请求时，采用的是单进程多线程的Master-Worker模型，通过libevent这个事件响应库来实现的。</p>

<p>首先来看一下主线程和工作线程之间是怎么交互的吧：</p>

<p>工作线程在初始化的时候，会建立一个pipe（管道），两端分别为：<code>notify_receive_fd</code>，以及<code>notify_send_fd</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nthreads</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fds</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pipe</span><span class="p">(</span><span class="n">fds</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Can&#39;t create notify pipe&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">threads</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">notify_receive_fd</span> <span class="o">=</span> <span class="n">fds</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">threads</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">notify_send_fd</span> <span class="o">=</span> <span class="n">fds</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setup_thread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">threads</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="cm">/* Reserve three fds for the libevent base, and two for the pipe */</span>
</span><span class='line'>    <span class="n">stats</span><span class="p">.</span><span class="n">reserved_fds</span> <span class="o">+=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>也就是说当其他线程向<code>notify_send_fd</code>文件描述符写内容的时候，<code>notify_receive_fd</code>就可以接受到。</p>

<p>接着，就用到了libevent的API：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">me</span><span class="o">-&gt;</span><span class="n">base</span> <span class="o">=</span> <span class="n">event_init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Listen for notifications from other threads */</span>
</span><span class='line'><span class="n">event_set</span><span class="p">(</span><span class="o">&amp;</span><span class="n">me</span><span class="o">-&gt;</span><span class="n">notify_event</span><span class="p">,</span> <span class="n">me</span><span class="o">-&gt;</span><span class="n">notify_receive_fd</span><span class="p">,</span>
</span><span class='line'>          <span class="n">EV_READ</span> <span class="o">|</span> <span class="n">EV_PERSIST</span><span class="p">,</span> <span class="n">thread_libevent_process</span><span class="p">,</span> <span class="n">me</span><span class="p">);</span>
</span><span class='line'><span class="n">event_base_set</span><span class="p">(</span><span class="n">me</span><span class="o">-&gt;</span><span class="n">base</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">me</span><span class="o">-&gt;</span><span class="n">notify_event</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">event_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">me</span><span class="o">-&gt;</span><span class="n">notify_event</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Can&#39;t monitor libevent notify pipe</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个工作线程都新建一个libevent实例(<code>me-&gt;base</code>)，并且将<code>notify_event</code>绑定在这个实例上。</p>

<p><code>notify_event</code>什么时候触发？
当<code>notify_receive_fd</code>有内容的时候被触发。</p>

<p>触发了执行什么函数？
执行<code>thread_libevent_process (me)</code>函数。</p>

<p>那在哪个地方会写<code>notify_send_fd</code>呢？
在主线程将新建的连接分发给工作时，就会向某个线程的<code>notify_send_fd</code>写一个空的字符串用来唤醒这个线程。下面的代码一目了然：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">dispatch_conn_new</span><span class="p">(</span><span class="kt">int</span> <span class="n">sfd</span><span class="p">,</span> <span class="k">enum</span> <span class="n">conn_states</span> <span class="n">init_state</span><span class="p">,</span> <span class="kt">int</span> <span class="n">event_flags</span><span class="p">,</span>
</span><span class='line'>                       <span class="kt">int</span> <span class="n">read_buffer_size</span><span class="p">,</span> <span class="k">enum</span> <span class="n">network_transport</span> <span class="n">transport</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CQ_ITEM</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="n">cqi_new</span><span class="p">();</span>
</span><span class='line'>    <span class="cm">/*这就是所谓的round robin*/</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tid</span> <span class="o">=</span> <span class="p">(</span><span class="n">last_thread</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">settings</span><span class="p">.</span><span class="n">num_threads</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LIBEVENT_THREAD</span> <span class="o">*</span><span class="kr">thread</span> <span class="o">=</span> <span class="n">threads</span> <span class="o">+</span> <span class="n">tid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">last_thread</span> <span class="o">=</span> <span class="n">tid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">item</span><span class="o">-&gt;</span><span class="n">sfd</span> <span class="o">=</span> <span class="n">sfd</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cq_push</span><span class="p">(</span><span class="kr">thread</span><span class="o">-&gt;</span><span class="n">new_conn_queue</span><span class="p">,</span> <span class="n">item</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">write</span><span class="p">(</span><span class="kr">thread</span><span class="o">-&gt;</span><span class="n">notify_send_fd</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Writing to thread notify pipe&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先来看看主线程，当他把其他工作线程、维护线程启起来之后，就开始侦听socket端口了（可以在memcached的源码中看出tcp和udp在处理逻辑上有很多不同的地方，但我不知道为什么不一样，就只看了处理tcp部分的代码，看来改补一补网络通信的知识了……），主要逻辑在<code>server_sockets</code>函数中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">IS_UDP</span><span class="p">(</span><span class="n">transport</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="n">settings</span><span class="p">.</span><span class="n">num_threads_per_udp</span><span class="p">;</span> <span class="n">c</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* this is guaranteed to hit all threads because we round-robin */</span>
</span><span class='line'>        <span class="n">dispatch_conn_new</span><span class="p">(</span><span class="n">sfd</span><span class="p">,</span> <span class="n">conn_read</span><span class="p">,</span> <span class="n">EV_READ</span> <span class="o">|</span> <span class="n">EV_PERSIST</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">UDP_READ_BUFFER_SIZE</span><span class="p">,</span> <span class="n">transport</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">listen_conn_add</span> <span class="o">=</span> <span class="n">conn_new</span><span class="p">(</span><span class="n">sfd</span><span class="p">,</span> <span class="n">conn_listening</span><span class="p">,</span>
</span><span class='line'>                                     <span class="n">EV_READ</span> <span class="o">|</span> <span class="n">EV_PERSIST</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                     <span class="n">transport</span><span class="p">,</span> <span class="n">main_base</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;failed to create listening connection</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">listen_conn_add</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">listen_conn</span><span class="p">;</span>
</span><span class='line'>    <span class="n">listen_conn</span> <span class="o">=</span> <span class="n">listen_conn_add</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>conn_new</code>函数建立了连接之后，将socket文件描述符于<code>event_handler</code>函数绑定，当有socket请求过来的时候，就执行<code>event_handler</code>。在<code>event_handler</code>中，就是直接调用<code>drive_machine</code>这个大大的状态转移函数，一次连接的所有状态就都在这个函数里面处理了。</p>

<p>主线程首先达到<code>drive_machine</code>中的<code>conn_listenning</code>状态，然后通过<code>dispatch_conn_new</code>将这次的连接分配给某个工作线程，工作线程再经历其他的状态，完成一次请求。</p>

<p><code>drive_machine</code>的具体逻辑比较复杂，这里就不讲了。</p>

<p>好，最后简单回顾下这个工作流程：</p>

<ol>
<li> 主线程接受到memcached客户端的请求（是在哪儿一直接收请求的？）</li>
<li> 主线程通过round robin找到一个工作线程</li>
<li> 主线程将创建的连接push到工作线程的连接队列中，然后唤醒这个工作线程</li>
<li> 工作线程被唤醒后，从自己的线程队列中取出一个连接</li>
<li> 解析请求、对hash表进行相应的操作，写入返回</li>
</ol>


<p>整体看下来，感觉memcached的源码并没有什么高深的算法，用的都是很朴素的链表、底层的网络通信、线程间互斥、字符串解析等等，感觉除了网络通信比较繁琐以外，其他的地方都是一个刚毕业的计算机专业的学生可以也应该掌握的。通过对一些简单、实用的东西进行有效的组合，就可以获取一个功能更强大的合成体。</p>

<p>&mdash;EOF&mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我也来说说大公司的那些“病”]]></title>
    <link href="http://quxiao.github.io/blog/2013/05/13/the_diseases_in_big_company/"/>
    <updated>2013-05-13T00:01:43+08:00</updated>
    <id>http://quxiao.github.io/blog/2013/05/13/the_diseases_in_big_company</id>
    <content type="html"><![CDATA[<p>入职一年多，在大公司里面学到了不少东西，比如学习了模块的开发流程，了解了公司的许多业务系统、模块，也体会到了不少工作中的“狼性”。但是工作的这一年多，尤其是最近这段时间，也感受到了大公司的一些“病”，今天来吐槽一下。（可能并不一定就是病，也可能和自身的理解有关，我这里只是罗列一下，仅代表个人观点）</p>

<h1>会议太多</h1>

<p>周一到周五，几乎每隔一天就要开上一次会，会议时间有长有短，短的15分钟，长的要开上一下午。虽然大部分的会议时间并不算很长，但也严重打断了我们RD的思路。经常是问题想了一半，然后被拉过去开会，开完会再试图把上下文切换回来，结果花费很长时间，说不定中间再被一个事情打断，那整个下午（或者上午）就算是废了。</p>

<p>大多数的会议，内容就是在过进度，PM这周做了哪些事，RD开发到什么进度了。这种事情大家每天写在一个公共的地方（比如日报、周报系统），让大家都能看到也就行了，不必每次都把所有相关人员聚到一个专门的会议室。大家来会议室，也都是带着自己的笔记本电脑，做自己的事情。做自己事情的效率、以及开会的效率都很低。</p>

<h1>项目太多</h1>

<p>公司大了，不管旧的项目维护，还是新的项目开发，都渐渐多了起来。这样一来，一个人所涉及到的项目也就多了起来。作为一个RD，经常需要维护A项目的升级、排查B项目的bug、再进行C项目的开发。你的C项目开发正进入状态的时候，让你再弄一下啊项目A和B，换做谁效率都高不了。对于QA，可能更悲剧，公司QA人手本来就少，结果项目、模块越来越多，QA经常一个项目接着一个项目进行测试，之前我甚至看到过一个QA的签名是“同时测10个模块……”，这么赶，测试case就不一定想得很周全了，线上出现问题的概率也会越来越大。</p>

<h1>人员比例失调</h1>

<p>不知为何，公司里面，PM（产品经理）：RD：QA差不多是3：2：1 这么个奇怪的比例，按我的理解，PM：RD：QA应该是1：2：2.5才比较合理，RD和QA，都算是开发，具体什么比例其实可以比较灵活；至于PM，应该保持少而精，1~2个人就能撑起一个规模不小的项目。对于目前公司PM的人数，我觉得是太多了。经常1个RD需要接口5~6个PM，别说是5、6个PM，就算是2、3个PM同一天有事联系你，也够RD同学喝一壶的，要是5、6个PM每周“均匀”地“骚扰”你，你也别干什么事了。</p>

<p>而且，许多PM同学也都是新人，经验明显不足，本来PM应该是给项目规划好一个大的方向，协调各方、共同朝这个方面努力的。结果许多新的PM是在一边参与项目，一边学习，能不添乱就已经很好了。许多PM，连基本的处理数据的能力都欠缺。经常是，PM有一个数据的需求，RD在服务器上运算好了，PM不会登录服务器，需要RD线下或者邮件提供，有的甚至一定要Excel格式的才行。数据里面多了一列、多了个逗号啥的，PM就不会处理了，需要RD调整一下格式再提供……</p>

<p>不过话说回来，还是有些PM是比较给力的，文档写得明确、数据也能自己处理，有的更给力的直接对RD说，“把mysql的账号密码告诉我，我自己跑sql”，对于RD来说，遇到这种PM真是件令人愉快的事情！</p>

<h1>KPI</h1>

<p>这个算是老生长谈了，每半年或者一年，大家都需要回顾一下过去，并对自己所做的事情打个分，还要展望一下未来，对于半年甚至一年之后的事情，做一下规划。回顾下过来也就算了，这是有必要的。对下一个半年进行规划，这就有点勉为其难的。比如项目刚刚开展实验，还不知道效果怎么样，如何确定半年里面对这个项目做规划，或者说半年里面，这个项目做不做还要打上一个问号呢。</p>

<p>另外，不同职位上的同学对于KPI的理解和要求不一致，也会导致许多问题。比如对于一个商业产品，PM的KPI会是指这个产品给公司带来了多少收益、新增了多少客户；而对于我们RD同学，我们KPI的定义除了收益之外，还有这个产品中的系统的稳定性、能够承受的性能指标，还有比如采用了什么新的技术，使得系统扩展性更好、同时减少人力的投入等等这些。</p>

<p>这样一来，双方为了达到各自的KPI，所采取的行为可能就是相悖的。比如对于一个新的商品产品，PM想到的往往是接几个大客户、大单子，这样一下子PM的KPI就很容易达标了。而如果是这样的话，对于RD来说，所需要做的工作可能就是：开发一个能够满足功能的系统、修改下配置、上线这几家客户。这对于RD来说，意义很小。</p>

<p>RD的想法一般是接入许多中小客户，使得大规模的客户能在系统中运转起来，产生规模效应，RD在这个过程中就可以依据线上的效果，对系统进行迭代的升级，以提高这个产品的整体收益。不过整个过程肯定是要花上不短的时间的，PM可能对于这个时间就不能接受了，毕竟接大单子一下子就有不小的收益，还体现了PM的工作能力，PM何乐而不为呢。</p>

<p>不过，KPI这种事，就像是高考一样，虽然有各种各样的弊端，不过对于一个有上万乃至十几万人的公司来说，可能已经算是最公平的方法了，谁让我们在一个大公司呢，呵呵。</p>

<p>&mdash;EOF&mdash;&ndash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日常工作中用到的Shell/Python命令——文本篇]]></title>
    <link href="http://quxiao.github.io/blog/2013/04/08/shell_and_python_in_daily_work_part1_text_processing/"/>
    <updated>2013-04-08T22:44:54+08:00</updated>
    <id>http://quxiao.github.io/blog/2013/04/08/shell_and_python_in_daily_work_part1_text_processing</id>
    <content type="html"><![CDATA[<p>作为一名RD，作为一名后端RD，每天大部分的工作都是在终端上面完成的，除了在vim上面编写代码，也需要分析日志、数据，定时跑一些任务，因此各种shell、各种脚本语言也是不少用。罗列些自己平时工作中用到查看、处理文本的命令：</p>

<h2>查看日志</h2>

<p>平常查看模块打印的日志，肯定是必需的，比如需要知道一个模块重启后运行是否正常，需要查看请求返回的一些字段。日志比较小的话（100Mb以内），可以直接用<code>vim</code>打开，否则会把服务器内存全部吃掉，甚至把服务器搞挂。。。</p>

<p>文件太大的话，可以用<code>less</code>或者<code>more</code>命令打开，这样不会把整个文件都load到内存，然后再使用“/”或者&#8221;?&ldquo;向后或者向前查找需要的字符串</p>

<p>有时只需要看看文件的头尾几行，看看日志的格式如何，用<code>head</code>以及<code>tail</code>就可以，特别，如果需要实时查看日志，则可以使用<code>tail -f</code>。</p>

<h2>过滤日志</h2>

<p>有时只需要获取日志的某些行，比如查找哪些行包含&#8221;FATAL&#8221;，就可以用</p>

<p><code>grep "FATAL" xxx.log</code></p>

<p>如果先是想看看有没有这类日志存在，就用管道结合<code>wc -l</code></p>

<p><code>grep "FATAL" xxx.log | wc -l</code></p>

<p>也可以结合之前的<code>less</code>、<code>head</code>、<code>tail</code>查看部分日志</p>

<p><code>grep "FATAL" xxx.log | less</code></p>

<p>如果是想获取日志中的某些字段，可以使用<code>cut</code>命令进行分割</p>

<p>假设有如下日志：</p>

<blockquote><p>1 2 3 4 5</p></blockquote>

<p>11 12 13 14 15</p>

<p>获取第三列，用<code>cat xxx.log | cut -d'\t' -f3</code>，就可以得到</p>

<blockquote><p>3</p></blockquote>

<p>13</p>

<p>有时候，日志比较复杂，比如：</p>

<blockquote><p>a=1,b=2,c=3</p></blockquote>

<p>比如还是获取第三列，则可以：</p>

<p><code>cat xxx.log | cut -d',' -f3 | cut -d'=' -f2</code></p>

<p>过滤日志，也可以使用<code>awk</code>，但感觉如何不是对于日志的数据进行计算，只用<code>awk</code>进行过滤，未免有些大材小用了，呵呵。</p>

<h2>计算日志字段</h2>

<p>好，这个时候<code>awk</code>就可以排上用场了，它不但能对字段进行过滤、累加、对日志按类似C语言<code>printf()</code>的格式进行输出，还可以进行dict运算。比如有一份日志保存着每次请求的query字段：</p>

<blockquote><p>htc</p></blockquote>

<p>iphone4s</p>

<p>htc</p>

<p>sumsung</p>

<p>xiaomi</p>

<p>我需要知道每个query的频次，用几行python应该也能很快搞定，不过用<code>awk</code>，仅需用一行：</p>

<pre><code>cat xxx.log | awk '{dict[$1]++;} END{for(i in dict){printf "query:[%s] pv:[%d]\n", i, dict[i];}}'
</code></pre>

<blockquote><p>query:[xiaomi] pv:[1]</p></blockquote>

<p>query:[sumsung] pv:[1]</p>

<p>query:[htc] pv:[2]</p>

<p>query:[iphone4s] pv:[1]</p>

<h2>遍历文件</h2>

<p>有时候需要依次对一些文件进行相同的处理，如果只是想遍历文件一个文件夹下面的某些文件，可以直接</p>

<pre><code>for file in ./*.log; do echo "$file"; done
</code></pre>

<blockquote><p>./zhixin_stat.log
./zhixin_stat.py.log</p></blockquote>

<p>有时候需要构造一些序列，一般情况，用类似C语言的for循环，比如：</p>

<pre><code>for ((i=0; i&lt;=10; i++)); do echo 201304$i; done
</code></pre>

<blockquote><p>2013040
2013041
2013042
2013043
2013044
2013045
2013046
2013047
2013048
2013049
20130410</p></blockquote>

<p>但是可以发现，生成的序列宽度是不一样的，就需要用到seq命令了，它可能生成固定宽度的序列：</p>

<pre><code>for i in `seq -w 1 10`; do echo 201304$i; done
</code></pre>

<blockquote><p>20130401
20130402
20130403
20130404
20130405
20130406
20130407
20130408
20130409
20130410</p></blockquote>

<h2>用python进行排序</h2>

<p>统计数据，难免需要对某几个维度进行分析，在python中进行排序，无非就是对于一个<code>list</code>进行排序，<code>list</code>中的元素一般为某个<code>class</code>或者一个<code>dict</code>。</p>

<p>对于排序class，需要定义&#8217;&lt;&lsquo;, &rsquo;>&lsquo;, &rsquo;&lt;=&lsquo;, &rsquo;>=&lsquo;, &rsquo;==&lsquo;, &rsquo;!=&lsquo;六种比较行为，就好像C++中的operator重载一样。具体Python doc中这篇<a href="http://docs.python.org/2/howto/sorting.html">HowTo</a>讲解的很清楚，这里不再赘述了。</p>

<p>对于dict进行排序，如果需要按照dict的某个key进行排序，则可以这么写：</p>

<pre><code>from operator import itemgetter
#按照name字段进行排序  
newlist = sorted(list_to_be_sorted, key=itemgetter('name'))
</code></pre>

<h2>用python发送邮件</h2>

<p>好了，文本统计完了，生成了一份统计报表，这时候可能就需要我们通过邮件的形式发送给同事看。用<code>crontab</code>每天凌晨开始抓数据、跑统计、然后把统计数据邮件给大家，显得专业！</p>

<p>发送邮件的功能，可以用python + sendmail实现：</p>

<pre><code>from os import path
import datetime
import time
import sys
import subprocess
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication

sender = 'quxiao@somewhere.com'
receiver = 'someone@somewhere.com'

def main(date):
    EmailBody = 'blablabla'
    msg = MIMEMultipart()
    msg['Subject'] = 'some subject'
    msg['From'] = sender
    msg['To'] = receiver
    msg.attach(MIMEText(EmailBody,'html','GB18030'))
    #send
    proc = subprocess.Popen(['/usr/lib/sendmail','-t'],stdin = subprocess.PIPE)
    proc.stdin.write(str(msg))
    proc.stdin.close()
</code></pre>

<p>&mdash;EOF&mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcached源码学习——item]]></title>
    <link href="http://quxiao.github.io/blog/2013/02/13/memcached_source_code_study_item/"/>
    <updated>2013-02-13T22:03:13+08:00</updated>
    <id>http://quxiao.github.io/blog/2013/02/13/memcached_source_code_study_item</id>
    <content type="html"><![CDATA[<p>item是memcached操作的最小单位，一个item包括以下数据：</p>

<ul>
<li>struct item 本身大小</li>
<li>key (<code>uint8_t</code>)</li>
<li>suffix (<code>uint8_t</code>)，内容是<code>" %d %d\r\n", flag, nbytes-2</code></li>
<li>value</li>
<li>CAS（optional, <code>uint64_t</code>）</li>
</ul>


<p>(参考<code>do_item_alloc</code> &amp;&amp; <code>item_make_header</code>)</p>

<p>与item相关的操作有以下几种</p>

<h2>分配item</h2>

<p>流程如下：</p>

<ol>
<li>确定item大小——ntotal</li>
<li>找到合适的slab</li>
<li>看该slab的（LRU）tails中是否有item

<ul>
<li>如果tails没有，在该slab上申请ntotal大小的内存</li>
<li>如果a) tails上面有item，并且b)其引用计数（refcount）为0，c)item是过期的（time和exptime），那么

<ul>
<li>重新计算这个slab上面分配的总item大小，</li>
<li>更新关联数组（do_item_unlink_noblock），就是链表的删除节点操作。</li>
<li>（注意：_hashitem_before()函数中，使用了&amp;引用操作）</li>
</ul>
</li>
<li>如果slab上面试图分配但是分配不到，并且最tails上的item没有过期（expire）

<ul>
<li>如果不允许将item给evict，return NULL</li>
<li>否则，a) 只好把这个tails上的item给evict掉; b) 重新计算这个slab上面分配的总item大小; c) 删除关联数组中的该item节点</li>
</ul>
</li>
</ul>
</li>
<li>初始化item各个字段</li>
</ol>


<h2> free item</h2>

<ol>
<li>当一个item的引用计数为0时，就将这个item“释放”（其实没有真正的释放）</li>
<li>计算item的大小ntotal</li>
<li>判断是在哪个<code>slab_class</code>上</li>
<li>在该<code>slab_class</code>上，释放ntotal大小的空间（之前的slab上释放空间的操作）</li>
</ol>


<h2>hashtable &amp;&amp; heads &amp;&amp; tails</h2>

<p>当对item进行创建、删除等操作的时候，除了在slab上进行申请、释放空间之外，还需要更新以下数据：</p>

<ul>
<li>item的time和flag</li>
<li>全局stats</li>
<li><code>primary_hashtable</code></li>
<li>与item对应的slab的heads和tails数组</li>
</ul>


<p>其中，</p>

<p>time就是当前创建时间，flag表示item目前的状态（TODO）</p>

<p><code>primary_hashtable</code>是一个<code>item**</code>结构</p>

<p><code>primary_hashtable</code>的大小是<code>2 ^ hashpower</code>，hashpower默认大小为16</p>

<p>item与<code>primary_hashtable</code>的对应关系为：</p>

<pre><code>hash_key(item) &amp; (2^hashporwer - 1)
</code></pre>

<p>heads和tails数组用于记录每一个<code>slab_class</code>的<code>item*</code>的链表，用于进行LRU淘汰，所以说，memcached的LRU算法是每个<code>slab_class</code>独立的。</p>

<p>&mdash;EOF&mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[memcached源码学习——Slab结构及操作]]></title>
    <link href="http://quxiao.github.io/blog/2013/02/03/memcached_source_code_study_slab_struct_and_operation/"/>
    <updated>2013-02-03T23:15:55+08:00</updated>
    <id>http://quxiao.github.io/blog/2013/02/03/memcached_source_code_study_slab_struct_and_operation</id>
    <content type="html"><![CDATA[<p>memcached的内存结构中，内存被分为一个一个的页（slab），每一个slab会被分到不同的<code>slab_class</code>。不同的<code>slab_class</code>，申请的item大小就不一样。</p>

<p><code>slab_class</code>所对应的数据结构如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//当前slab_class的最大item大小</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>      <span class="cm">/* sizes of items */</span>
</span><span class='line'>    <span class="c1">//当前slab_class每一个slab的item数</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">perslab</span><span class="p">;</span>   <span class="cm">/* how many items per slab */</span>
</span><span class='line'>    <span class="c1">//被释放过的item的list</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">**</span><span class="n">slots</span><span class="p">;</span>           <span class="cm">/* list of item ptrs */</span>
</span><span class='line'>    <span class="c1">//free list大小</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">sl_total</span><span class="p">;</span>  <span class="cm">/* size of previous array */</span>
</span><span class='line'>    <span class="c1">//free list下标 </span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">sl_curr</span><span class="p">;</span>   <span class="cm">/* first free slot */</span>
</span><span class='line'>    <span class="c1">//最近申请的page(slab)的指针</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">end_page_ptr</span><span class="p">;</span>         <span class="cm">/* pointer to next free item at end of page, or 0 */</span>
</span><span class='line'>    <span class="c1">//最近申请的page(slab)所剩的item个数</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">end_page_free</span><span class="p">;</span> <span class="cm">/* number of items remaining at end of last alloced page */</span>
</span><span class='line'>    <span class="c1">//当前slab_class申请了多少slab(page)</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">slabs</span><span class="p">;</span>     <span class="cm">/* how many slabs were allocated for this class */</span>
</span><span class='line'>    <span class="c1">//申请的slab的指针数组</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">**</span><span class="n">slab_list</span><span class="p">;</span>       <span class="cm">/* array of slab pointers */</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">list_size</span><span class="p">;</span> <span class="cm">/* size of prev array */</span>
</span><span class='line'>    <span class="c1">//没用到？</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">killing</span><span class="p">;</span>  <span class="cm">/* index+1 of dying slab, or zero if none */</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">requested</span><span class="p">;</span> <span class="cm">/* The number of requested bytes */</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="n">slabclass_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>slab初始化</h1>

<p>memcached的slab初始化比较简单，主要是设定一些字段的大小，逻辑如下：</p>

<p>下标i从0开始遍历每一个slab class：</p>

<ul>
<li>对齐当前slab class的size，使其是<code>CHUNK_ALIGN_BYTES</code>字节对齐的。</li>
<li>设置slabclass[i] 为size</li>
<li>设置当前slab class中，每一页能存放的iterm数据<code>slabclass[i].perslab</code></li>
<li>更新size为下一个slab class的size</li>
<li>设置最大的一个slab class，其中<code>size = setting.item_size_max, perslab = 1</code></li>
</ul>


<h1> slab分配内存</h1>

<ul>
<li>如果是采用系统的malloc，就是直接申请；</li>
<li>如果是预先申请了所有的内存的话，依次通过以下手段获取内存：

<ul>
<li>之前被“free”掉的item的地址会被标记在freelist中，如果freelist中有，则直接从freelist中拿；</li>
<li>如果最近申请过的页中还有剩余空间，则从页的末尾申请item</li>
<li>申请一个新的page</li>
</ul>
</li>
</ul>


<h1>释放slab上的item空间</h1>

<ul>
<li>如果是系统分配，free指针，mem_malloc &ndash;= size；</li>
<li>否则，将地址设置到free_list末尾，如果free_list满了，double一下长度</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我认为的健康生活]]></title>
    <link href="http://quxiao.github.io/blog/2012/12/30/e68891e8aea4e4b8bae79a84e581a5e5bab7e7949fe6b4bb/"/>
    <updated>2012-12-30T12:55:09+08:00</updated>
    <id>http://quxiao.github.io/blog/2012/12/30/e68891e8aea4e4b8bae79a84e581a5e5bab7e7949fe6b4bb</id>
    <content type="html"><![CDATA[<p>工作已有大半年，身为一个coder，工作还是挺辛苦的，生活也有时难免不规律，比如需要临时排查一个问题，或者要在晚上上线等等。但是，另一方面，正因为工作辛苦，健康对于我们来说就更为重要，毕竟身体是革命的本钱啊。经常看到关于IT从业者猝死的新闻，真是让人唏嘘不已。如果他们能够进行“可持续发展”，肯定能对社会有更大的贡献。</p>

<p>那么，什么样的生活才是健康的呢？才是可持续的？我想了想，至少应该有这么几点：</p>

<h1>早睡早起</h1>

<p>首先是要睡得早，你睡得晚必定起得就不会早。尽量能在23点上床睡觉，最好不要超过23：30。睡觉前泡泡脚，喝点牛奶蜂蜜啥的，有助睡眠。早上7点左右起床，在家吃好早饭，然后不急不忙的去上班。因为去公司比较早，人比较少，你还可以在比较安静的环境下高效的工作1.5个小时左右。在我们公司，上班的大部分时间都是十分吵闹的，各种交流、各种讨论，但是，coding有是项需要集中精力才能完成的事情，周围环境很吵闹的话，工作效率就不会很高（即使你戴上耳机听音乐）。因此，比别人早来公司的那段时间，就显得无比宝贵了。高效的完成一天的工作，你也就可以按时下班了。
可能人们心中会有这种等式：“生活规律” == “碌碌无为”，或者是“很晚下班” == “工作努力”。我觉得，很少部分情况下，这个等式才是成立的，绝大部分情况，只是说明你工作效率低下而已。</p>

<h1>饮食清淡</h1>

<p>现在，大家的午餐和晚餐基本上都是在外面吃了，其实是还是一个人住的时候。不过大家都知道，我国的食品，尤其是饭店的食品，可以说没什么安全可言。所以，能不在外面吃，就尽量不在外面吃，能自己做菜最好。不过可能也会中这样的烦恼：下班太晚，都没时间买菜、烧菜了。其实，只要能做到早点来公司并且工作效率较高的话，还是可以早点下班买菜的。
另外，就是吃的东西应该尽量清淡些，多吃蔬菜少吃肉。现在生活条件多好了，在外面吃的东西，基本都是很多肉、很多油的，我们早就摄入的过多了。所以当自己可以选择吃什么的时候，还是选择清淡些为好。</p>

<h1>定期锻炼</h1>

<p>工作了之后，锻炼的机会越来越少了，而且坐的时候越来越长了，这样子迟早会出问题的。坐了1、2个小时就站起来走走，去倒杯水，或者做些简单的操。（现在公司每天下午3点，大家会做广播体操，这个很赞）也可以去办张健身卡，用“既成事实法”，先把钱花出去，然后“逼迫”自己去锻炼，况且健身房的氛围也不错，也不用怕外面天气太冷或太热。</p>

<h1>养成看书的习惯</h1>

<p>身体需要锻炼，思想同样需要锻炼。不过，现在生活节奏快，发现我以及周围许多人，己经连读一篇几百字的文章的耐心都没有了，有个同事甚至开玩笑说，“我现在的头脑里面的内存很小，只有140字节，读太长的文章就溢出了”。
尽量争取每天读一篇比较有意义、有深度的文章，可以是和业界相关的，也可以说一些杂书里面的文章，不用太长时间，30分钟就足够了。少逛一次人人，少刷一次微博，时间就省下来了。</p>

<p>&mdash;EOF&mdash;</p>
]]></content>
  </entry>
  
</feed>
